@InBook{Morais2021,
  author    = {Morais, Gabriel and Bork, Dominik and Adda, Mehdi},
  pages     = {79–86},
  publisher = {Association for Computing Machinery},
  title     = {Towards an Ontology-Driven Approach to Model and Analyze Microservices Architectures},
  year      = {2021},
  address   = {New York, NY, USA},
  isbn      = {9781450383141},
  abstract  = {Microservices Architectures (MSAs) are continuously replacing monolithic systems toward achieving more flexible and maintainable service-oriented software systems. However, the shift toward an MSA also requires a technological and managerial shift for its adopters. Architecting and managing MSAs represent unique challenges, including microservices' identification, interoperability, and reuse. To handle these challenges, we propose an Ontology-driven Conceptual Modelling approach, based on the Ontology of Microservices Architecture Concepts (OMSAC), for modelling and analyzing microservices-based systems. We show, how OMSAC-based conceptual models, stocked in a Stardog triple store, support Stakeholder-specific communication, documentation, and reuse. This paper reports on the application of our approach in three open-source MSA systems with a focus on microservices' discovery based on similarity metrics. Eventually, we compare the extracted similarity metrics derived from the application of machine learning techniques to the OMSAC models with a manual analysis performed by experts.},
  booktitle = {Proceedings of the 13th International Conference on Management of Digital EcoSystems},
  comment   = {Old citationkey: 10.1145/3444757.3485108},
  numpages  = {8},
  url       = {https://doi.org/10.1145/3444757.3485108},
}

@InBook{Sorgalla2020,
  author    = {Sorgalla, Jonas and Rademacher, Florian and Sachweh, Sabine and Z\"{u}ndorf, Albert},
  pages     = {1506–1509},
  publisher = {Association for Computing Machinery},
  title     = {Modeling Microservice Architecture: A Comparative Experiment towards the Effectiveness of Two Approaches},
  year      = {2020},
  address   = {New York, NY, USA},
  isbn      = {9781450368667},
  abstract  = {Microservice Architecture denotes an architectural style for software systems whereby business capabilities are encapsulated in autonomous services. Model-driven Development is considered as means to foster the efficient development of such systems. It can be used to address complexity and tedious development tasks, e.g., by using code generation. In this short paper, we present two modeling approaches for describing microservice architecture and compare them. The first is based on domain-specific modeling languages, the second on the Unified Modeling Language. We comparatively evaluated both approaches in a student experiment with 32 participants. First results of the experiment indicate that students commit fewer modeling errors while using the set of domain-specific modeling languages.},
  booktitle = {Proceedings of the 35th Annual ACM Symposium on Applied Computing},
  comment   = {Old citationkey: 10.1145/3341105.3374065},
  numpages  = {4},
  url       = {https://doi.org/10.1145/3341105.3374065},
}

@InProceedings{Rademacher2019b,
  author    = {Rademacher, Florian and Sorgalla, Jonas and Sachweh, Sabine and Zündorf, Albert},
  booktitle = {2019 IEEE International Conference on Service-Oriented System Engineering (SOSE)},
  title     = {Viewpoint-Specific Model-Driven Microservice Development with Interlinked Modeling Languages},
  year      = {2019},
  month     = {April},
  pages     = {57-5709},
  abstract  = {Microservice Architecture (MSA) is a novel approach to the development and deployment of distributed, service-oriented software architectures. To this end, MSA puts a strong emphasis on service-specific independence regarding functional, technological, and organizational aspects. Based on that independence, MSA fosters the adoption of agile and DevOps-based development practices. On the other hand, Model-driven Development (MDD) is a software engineering approach that abstracts a software's design leveraging models. In particular, the development of complex, distributed software architectures is considered to benefit from MDD techniques like dedicated modeling languages, model validation, and model transformation. In this paper, we present an approach to employ MDD for MSA engineering. Therefore, we introduce a set of modeling languages for a model-driven workflow of microservice development in distributed, DevOps-based teams. The workflow considers the different DevOps roles of the teams' members on the basis of dedicated modeling viewpoints. Each modeling viewpoint clusters the modeling concerns of a certain DevOps role and is captured in its own metamodel. Starting from the metamodels, a set of modeling languages is derived to practically enable team members to construct models for their specific viewpoint on the microservice architecture. To foster the collaboration among team members of different DevOps roles, the metamodels and hence the modeling languages are interlinked. This interlinkage enables model reuse across viewpoints and subsequent composition of comprehensive architectural models of MSA-based software systems.},
  comment   = {Old citationkey: 8705907},
  doi       = {10.1109/SOSE.2019.00018},
  issn      = {2642-6587},
  keywords  = {Unified modeling language;Object oriented modeling;Software systems;Space vehicles;Containers;Resource management;Service-oriented systems engineering;Model-driven development;Software architecture;Software design},
}

@InProceedings{Rademacher2020,
  author    = {Rademacher, Florian and Sachweh, Sabine and Zündorf, Albert},
  booktitle = {2020 46th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  title     = {Deriving Microservice Code from Underspecified Domain Models Using DevOps-Enabled Modeling Languages and Model Transformations},
  year      = {2020},
  month     = {Aug},
  pages     = {229-236},
  abstract  = {Domain-driven Design (DDD) is a model-based software design methodology, which focuses on close collaboration of domain experts and software engineers. It promotes to capture relevant domain concepts in domain models in order to define a ubiquitous language, whose terms are well understood by stakeholders and consistently used throughout the software engineering process. DDD is considered particularly useful in Microservice Architecture (MSA) engineering, because it specifies patterns to structure modeled domain concepts in isolated contexts. These contexts determine concepts' applicability and validity, and make relationships between domain concepts beyond context boundaries explicit. Consequently, DDD contexts may be used to prescribe microservices' granularities and interaction relationships. However, domain models are usually underspecified, which facilitates communication with domain experts, but hampers the derivation of microservice code.In this paper, we present a model-driven methodology towards deriving microservice code from underspecified domain models. It relies on a set of viewpoint-based MSA modeling languages, which respect the concerns of DevOps teams, and a set of automatic model transformations, which decrease modeling effort and systematize source code derivation. We validate the applicability of our methodology by means of two case studies.},
  comment   = {Old citationkey: 9226287},
  doi       = {10.1109/SEAA51224.2020.00047},
  keywords  = {Unified modeling language;Context modeling;Data models;Biological system modeling;Computational modeling;Stakeholders;Software;Services Architectures;Services Engineering;Modeling of computer architecture},
}

@InProceedings{Schmidt2020,
  author    = {Schmidt, Roger Anderson and Thiry, Marcello},
  booktitle = {2020 15th Iberian Conference on Information Systems and Technologies (CISTI)},
  title     = {Microservices identification strategies : A review focused on Model-Driven Engineering and Domain Driven Design approaches},
  year      = {2020},
  month     = {June},
  pages     = {1-6},
  abstract  = {A proper architectural design for a microservices system is crucial for its success. Although there are several design strategies to identify software components in general, microservices demands special consideration. In this context of distributed systems, the component size directly impacts on nonfunctional requirements, such as performance, flexibility, reusability, etc. Design practices of coupling and cohesion have to be fine-tuned to determine the ideal microservices granularity. In order to shed light on this question, this study conducted a Systematic Literature Review that investigates microservices identification proposals. From procedures and guidelines inspired by Kitchenham et al., a rigorous research protocol was defined and performed, that covers publications from 2013 to 2019. Starting with an initial screening of 715 papers, 27 studies were considered relevant to answer four research questions. Besides microservices decomposition strategies, this review underlines Model Driven Engineering and Domain Driven Design, once they represent valuable approaches to support this challenging task. Moreover, this work highlights that only a few studies had explored these approaches in their strategies, which opens promising potential for further research.},
  comment   = {Old citationkey: 9141150},
  doi       = {10.23919/CISTI49556.2020.9141150},
  issn      = {2166-0727},
  keywords  = {Data models;Unified modeling language;Protocols;Systematics;Proposals;Databases;microservices;identification;decomposition;granularity;MDE;DDD;model-driven;domain-driven.},
}

@InProceedings{Bibartiu2021,
  author    = {Bibartiu, Otto and Dürr, Frank and Rothermel, Kurt},
  booktitle = {2021 IEEE International Conference on Services Computing (SCC)},
  title     = {Clams: A Cloud Application Modeling Solution},
  year      = {2021},
  month     = {Sep.},
  pages     = {1-10},
  abstract  = {A wide range of new modeling languages with a specific focus on cloud computing, also known as cloud modeling languages (CMLs), have been introduced to help developers describe, evaluate, and deploy cloud applications. In general, CMLs define applications as interconnected cloud components within an architectural topology. However, in agile software development, developers describe system-level functionalities using user stories or epics to define end-user scenarios. So far, a CML bridging the gap between formal architectural descriptions and the informal scenario descriptions from agile development is missing. We present Clams (Cloud application modeling solution), a scenario-based CML. Clams uses cloud computing patterns as architectural placeholders in combination with message sequence charts. We introduce standard tooling to handle Clams models and show how one can refine patterns to concrete service offerings. Additionally, we also provide a development framework to support the creation of custom tools to evaluate, analyze, or translate Clams models efficiently.},
  comment   = {Old citationkey: 9592516},
  doi       = {10.1109/SCC53864.2021.00013},
  issn      = {2474-2473},
  keywords  = {Cloud computing;Computational modeling;Architecture;Agile software development;Service computing;Computer architecture;Tools;Cloud Modeling Language;Scenarios;Cloud Computing Patterns},
}

@InCollection{Verginadis2021,
  author    = {Verginadis, Yiannis and Kritikos, Kyriakos and Patiniotakis, Ioannis},
  booktitle = {Advanced {Information} {Systems} {Engineering}},
  publisher = {Springer International Publishing},
  title     = {Data and {Cloud} {Polymorphic} {Application} {Modelling} in {Multi}-clouds and {Fog} {Environments}},
  year      = {2021},
  address   = {Cham},
  editor    = {La Rosa, Marcello and Sadiq, Shazia and Teniente, Ernest},
  isbn      = {978-3-030-79381-4 978-3-030-79382-1},
  note      = {Series Title: Lecture Notes in Computer Science},
  pages     = {449--464},
  volume    = {12751},
  comment   = {Old citationkey: la_rosa_data_2021},
  doi       = {10.1007/978-3-030-79382-1_27},
  language  = {en},
  url       = {https://link.springer.com/10.1007/978-3-030-79382-1_27},
  urldate   = {2022-02-03},
}


@InCollection{Trebbau2021,
  author    = {Trebbau, Simon and Wizenty, Philip and Sachweh, Sabine},
  booktitle = {Agile {Processes} in {Software} {Engineering} and {Extreme} {Programming} – {Workshops}},
  publisher = {Springer International Publishing},
  title     = {Towards {Integrating} {Blockchains} with {Microservice} {Architecture} {Using} {Model}-{Driven} {Engineering}},
  year      = {2021},
  address   = {Cham},
  editor    = {Gregory, Peggy and Kruchten, Philippe},
  isbn      = {978-3-030-88582-3 978-3-030-88583-0},
  note      = {Series Title: Lecture Notes in Business Information Processing},
  pages     = {167--175},
  volume    = {426},
  abstract  = {Abstract
            Blockchain presents a feasible method to persist immutable information in a distributed ledger to improve the level of authentication and trust. Moreover, smart contracts enable the automated execution of any contract concluded between participants of the Blockchain network. On the other hand, Microservice Architecture (MSA) is a novel approach towards service-based scalable applications. In our paper, we present an approach based on Model-Driven Engineering (MDE) that aims to facilitate the integration process of Blockchains into MSA-based applications in order to benefit from the advantages attributed to Blockchains.},
  comment   = {Old citationkey: gregory_towards_2021},
  doi       = {10.1007/978-3-030-88583-0_16},
  language  = {en},
  url       = {https://link.springer.com/10.1007/978-3-030-88583-0_16},
  urldate   = {2022-02-03},
}

@InCollection{Giallorenzo2021,
  author     = {Giallorenzo, Saverio and Montesi, Fabrizio and Peressotti, Marco and Rademacher, Florian and Sachweh, Sabine},
  booktitle  = {Coordination {Models} and {Languages}},
  publisher  = {Springer International Publishing},
  title      = {Jolie and {LEMMA}: {Model}-{Driven} {Engineering} and {Programming} {Languages} {Meet} on {Microservices}},
  year       = {2021},
  address    = {Cham},
  editor     = {Damiani, Ferruccio and Dardha, Ornela},
  isbn       = {978-3-030-78141-5 978-3-030-78142-2},
  note       = {Series Title: Lecture Notes in Computer Science},
  pages      = {276--284},
  volume     = {12717},
  comment    = {Old citationkey: damiani_jolie_2021},
  doi        = {10.1007/978-3-030-78142-2_17},
  language   = {en},
  shorttitle = {Jolie and {LEMMA}},
  url        = {https://link.springer.com/10.1007/978-3-030-78142-2_17},
  urldate    = {2022-02-03},
}

@InCollection{Rademacher2020a,
  author    = {Rademacher, Florian and Sorgalla, Jonas and Wizenty, Philip and Sachweh, Sabine and Zündorf, Albert},
  booktitle = {Microservices},
  publisher = {Springer International Publishing},
  title     = {Graphical and {Textual} {Model}-{Driven} {Microservice} {Development}},
  year      = {2020},
  address   = {Cham},
  editor    = {Bucchiarone, Antonio and Dragoni, Nicola and Dustdar, Schahram and Lago, Patricia and Mazzara, Manuel and Rivera, Victor and Sadovykh, Andrey},
  isbn      = {978-3-030-31645-7 978-3-030-31646-4},
  pages     = {147--179},
  abstract  = {Old citationkey: bucchiarone_graphical_2020},
  doi       = {10.1007/978-3-030-31646-4_7},
  language  = {en},
  url       = {http://link.springer.com/10.1007/978-3-030-31646-4_7},
  urldate   = {2022-02-03},
}

@InProceedings{Rademacher2019a,
  author    = {Rademacher, Florian and Sachweh, Sabine and Zündorf, Albert},
  booktitle = {2019 IEEE International Conference on Software Architecture (ICSA)},
  title     = {Aspect-Oriented Modeling of Technology Heterogeneity in Microservice Architecture},
  year      = {2019},
  month     = {March},
  pages     = {21-30},
  abstract  = {Microservice Architecture (MSA) is a novel approach for the development and deployment of service-based software systems. MSA puts a strong emphasis on loose coupling and high cohesion of services. This increases service-specific