@Comment{jabref-meta: databaseType:bibtex;}

@inproceedings{10.1145/3297280.3300182,
author = {Rademacher, Florian and Sorgalla, Jonas and Sachweh, Sabine and Z\"{u}ndorf, Albert},
title = {A Model-Driven Workflow for Distributed Microservice Development},
year = {2019},
isbn = {9781450359337},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3297280.3300182},
doi = {10.1145/3297280.3300182},
abstract = {Model-driven Development (MDD) is a software engineering approach that abstracts a software's design leveraging models. In particular, the development of complex, service-based architectures is considered to benefit from MDD techniques like model validation, transformation, and code generation. This paper presents an MDD-based workflow for distributed, DevOps-based microservice development and identifies the involved model types. They provide the foundation for the subsequent development of modeling languages to employ MDD for MSA engineering.},
booktitle = {Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing},
pages = {1260–1262},
numpages = {3},
keywords = {distributed microservice development, modeling languages, viewpoint modeling, microservice architecture, model-driven microservice development},
location = {Limassol, Cyprus},
series = {SAC '19}
}

@inproceedings{10.1145/3411564.3411629,
author = {Villa\c{c}a, Lu\'{\i}s Henrique Neves and Azevedo, Leonardo Guerreiro and Siqueira, Sean Wolfgand Matsui},
title = {Microservice Architecture for Multistore Database Using Canonical Data Model},
year = {2020},
isbn = {9781450388733},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3411564.3411629},
doi = {10.1145/3411564.3411629},
abstract = { In a microservice architecture, solutions are created by teams focused on specific domains and needs. They independently develop and deploy distributed services in the network. One characteristic of microservices is decentralized data management. Each microservice may use different data management technology which best fit its needs. Hence, it is an issue to integrate data of heterogenous microservices to come up with consolidate data views. Flexible and efficient solutions in this scenario are needed. This work is based on the use of a canonical data model as the mechanism for data integration in microservices. The canonical data model is the reference for query specifications and data integration. This work proposes and implements a microservice architecture based on this strategy and it is composed by nodes that intercommunicate through several mechanisms (e.g., SPARQL, GraphQL and JDBC queries, calls to REST services and proprietary APIs). The solution was analyzed in a proof of concept in a fictitious scenario but using real services available at DBPedia and Twitter. The evaluation goal was to qualitatively analyze the use of the architecture in the design, development and execution of microservices in order to identify the characteristics one should consider when using the canonical data model strategy. The evaluation employed the criteria of ISO/IEC 25010 model that most relate to the SOA challenges, which were: usability; performance; compatibility; and, maintainability. The identified advantages and disadvantages of using the architecture (i.e., the strategy) can be used by architects and developers to make their development decisions.},
booktitle = {XVI Brazilian Symposium on Information Systems},
articleno = {20},
numpages = {8},
keywords = {service-oriented architecture, polyglot persistence, multistore, microservice architecture, canonical data model},
location = {S\~{a}o Bernardo do Campo, Brazil},
series = {SBSI'20}
}

@inproceedings{10.1145/3338906.3341185,
author = {Tundo, Alessandro and Mobilio, Marco and Orr\`{u}, Matteo and Riganelli, Oliviero and Guzm\`{a}n, Michell and Mariani, Leonardo},
title = {VARYS: An Agnostic Model-Driven Monitoring-as-a-Service Framework for the Cloud},
year = {2019},
isbn = {9781450355728},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3338906.3341185},
doi = {10.1145/3338906.3341185},
abstract = {Cloud systems are large scalable distributed systems that must be carefully monitored to timely detect problems and anomalies. While a number of cloud monitoring frameworks are available, only a few solutions address the problem of adaptively and dynamically selecting the indicators that must be collected, based on the actual needs of the operator. Unfortunately, these solutions are either limited to infrastructure-level indicators or technology-specific, for instance, they are designed to work with OpenStack but not with other cloud platforms. This paper presents the VARYS monitoring framework, a technology-agnostic Monitoring-as-a-Service solution that can address KPI monitoring at all levels of the Cloud stack, including the application-level. Operators use VARYS to indicate their monitoring goals declaratively, letting the framework to perform all the operations necessary to achieve a requested monitoring configuration automatically. Interestingly, the VARYS architecture is general and extendable, and can thus be used to support increasingly more platforms and probing technologies.},
booktitle = {Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1085–1089},
numpages = {5},
keywords = {Monitoring-as-a-Service, Monitoring Framework, Cloud computing},
location = {Tallinn, Estonia},
series = {ESEC/FSE 2019}
}

@inbook{10.1145/3444757.3485108,
author = {Morais, Gabriel and Bork, Dominik and Adda, Mehdi},
title = {Towards an Ontology-Driven Approach to Model and Analyze Microservices Architectures},
year = {2021},
isbn = {9781450383141},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3444757.3485108},
abstract = {Microservices Architectures (MSAs) are continuously replacing monolithic systems toward achieving more flexible and maintainable service-oriented software systems. However, the shift toward an MSA also requires a technological and managerial shift for its adopters. Architecting and managing MSAs represent unique challenges, including microservices' identification, interoperability, and reuse. To handle these challenges, we propose an Ontology-driven Conceptual Modelling approach, based on the Ontology of Microservices Architecture Concepts (OMSAC), for modelling and analyzing microservices-based systems. We show, how OMSAC-based conceptual models, stocked in a Stardog triple store, support Stakeholder-specific communication, documentation, and reuse. This paper reports on the application of our approach in three open-source MSA systems with a focus on microservices' discovery based on similarity metrics. Eventually, we compare the extracted similarity metrics derived from the application of machine learning techniques to the OMSAC models with a manual analysis performed by experts.},
booktitle = {Proceedings of the 13th International Conference on Management of Digital EcoSystems},
pages = {79–86},
numpages = {8}
}

@inbook{10.1145/3341105.3374065,
author = {Sorgalla, Jonas and Rademacher, Florian and Sachweh, Sabine and Z\"{u}ndorf, Albert},
title = {Modeling Microservice Architecture: A Comparative Experiment towards the Effectiveness of Two Approaches},
year = {2020},
isbn = {9781450368667},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3341105.3374065},
abstract = {Microservice Architecture denotes an architectural style for software systems whereby business capabilities are encapsulated in autonomous services. Model-driven Development is considered as means to foster the efficient development of such systems. It can be used to address complexity and tedious development tasks, e.g., by using code generation. In this short paper, we present two modeling approaches for describing microservice architecture and compare them. The first is based on domain-specific modeling languages, the second on the Unified Modeling Language. We comparatively evaluated both approaches in a student experiment with 32 participants. First results of the experiment indicate that students commit fewer modeling errors while using the set of domain-specific modeling languages.},
booktitle = {Proceedings of the 35th Annual ACM Symposium on Applied Computing},
pages = {1506–1509},
numpages = {4}
}

@inproceedings{10.1145/3381991.3395610,
author = {Fern\'{a}ndez, Maribel and Franch Tapia, Alex and Jaimunk, Jenjira and Martinez Chamorro, Manuel and Thuraisingham, Bhavani},
title = {A Data Access Model for Privacy-Preserving Cloud-IoT Architectures},
year = {2020},
isbn = {9781450375689},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3381991.3395610},
doi = {10.1145/3381991.3395610},
abstract = {We propose a novel data collection and data sharing model for cloud-IoT architectures with an emphasis on data privacy. This model has been implemented in Privasee, an open source platform for privacy-aware web-application development, which provides a plug-in module to support IoT application development. Privasee uses a cloud-IoT architecture called DataBank. We provide examples and discuss future extensions.},
booktitle = {Proceedings of the 25th ACM Symposium on Access Control Models and Technologies},
pages = {191–202},
numpages = {12},
keywords = {data privacy, privacy-preserving platform, internet of things, access control, privacy policy, data collection},
location = {Barcelona, Spain},
series = {SACMAT '20}
}

@inproceedings{10.1145/3368235.3368840,
author = {Kritikos, Kyriakos and Skrzypek, Pawe\l{}},
title = {Are Cloud Modelling Languages Ready for Multi-Cloud?},
year = {2019},
isbn = {9781450370448},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368235.3368840},
doi = {10.1145/3368235.3368840},
abstract = {Multi-cloud computing promises to deliver certain benefits, like performance optimisation and cost reduction. However, most cloud application modelling languages are tight to one cloud platform and do not have the right expressiveness to cover all application lifecycle phases. This survey attempts to review the most important from these languages, which facilitate application provisioning in commercial cloud platforms. The main review goals are to: (a) highlight those languages already or nearly multi-cloud enabled; (b) determine those parts of the remaining languages that must be extended to support multi-cloud application modelling. This review results also lead to drawing some future work directions towards producing an ideal multi-cloud application specification language.},
booktitle = {Proceedings of the 12th IEEE/ACM International Conference on Utility and Cloud Computing Companion},
pages = {51–58},
numpages = {8},
keywords = {evaluation, application, survey, modelling, comparison, multi-cloud},
location = {Auckland, New Zealand},
series = {UCC '19 Companion}
}

@inproceedings{10.1145/3344341.3368805,
author = {Elhabbash, Abdessalam and Jumagaliyev, Assylbek and Blair, Gordon S. and Elkhatib, Yehia},
title = {SLO-ML: A Language for Service Level Objective Modelling in Multi-Cloud Applications},
year = {2019},
isbn = {9781450368940},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3344341.3368805},
doi = {10.1145/3344341.3368805},
abstract = {Cloud modelling languages (CMLs) are designed to assist customers in tackling the diversity of services in the current cloud market. While many CMLs have been proposed in the literature, they lack practical support for automating the selection of services based on the specific service level objectives of a customer's application. We put forward SLO-ML, a novel and generative CML to capture service level requirements. Subsequently, SLO-ML selects the services to honour the customer's requirements and generates the deployment code appropriate to these services. We present the architectural design of SLO-ML and the associated broker that realises the deployment operations. We evaluate SLO-ML using an experimental case study with a group of researchers and developers using a real-world cloud application. We also assess SLO-ML's overheads through empirical scalability tests. We express the promises of SLO-ML in terms of gained productivity and experienced usability, and we highlight its limitations by analysing it as application requirements grow.},
booktitle = {Proceedings of the 12th IEEE/ACM International Conference on Utility and Cloud Computing},
pages = {241–250},
numpages = {10},
keywords = {cloud modelling languages, domain specific language, service level agreements, service level objectives, cloud computing},
location = {Auckland, New Zealand},
series = {UCC'19}
}

@article{10.1145/3474056,
author = {Berlato, Stefano and Carbone, Roberto and Lee, Adam J. and Ranise, Silvio},
title = {Formal Modelling and Automated Trade-off Analysis of Enforcement Architectures for Cryptographic Access Control in the Cloud},
year = {2021},
issue_date = {February 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {25},
number = {1},
issn = {2471-2566},
url = {https://doi.org/10.1145/3474056},
doi = {10.1145/3474056},
abstract = {To facilitate the adoption of cloud by organizations, Cryptographic Access Control (CAC) is the obvious solution to control data sharing among users while preventing partially trusted Cloud Service Providers (CSP) from accessing sensitive data. Indeed, several CAC schemes have been proposed in the literature. Despite their differences, available solutions are based on a common set of entities—e.g., a data storage service or a proxy mediating the access of users to encrypted data—that operate in different (security) domains—e.g., on-premise or the CSP. However, the majority of these CAC schemes assumes a fixed assignment of entities to domains; this has security and usability implications that are not made explicit and can make inappropriate the use of a CAC scheme in certain scenarios with specific trust assumptions and requirements. For instance, assuming that the proxy runs at the premises of the organization avoids the vendor lock-in effect but may give rise to other security concerns (e.g., malicious insiders attackers).To the best of our knowledge, no previous work considers how to select the best possible architecture (i.e., the assignment of entities to domains) to deploy a CAC scheme for the trust assumptions and requirements of a given scenario. In this article, we propose a methodology to assist administrators in exploring different architectures for the enforcement of CAC schemes in a given scenario. We do this by identifying the possible architectures underlying the CAC schemes available in the literature and formalizing them in simple set theory. This allows us to reduce the problem of selecting the most suitable architectures satisfying a heterogeneous set of trust assumptions and requirements arising from the considered scenario to a decidable Multi-objective Combinatorial Optimization Problem (MOCOP) for which state-of-the-art solvers can be invoked. Finally, we show how we use the capability of solving the MOCOP to build a prototype tool assisting administrators to preliminarily perform a “What-if” analysis to explore the trade-offs among the various architectures and then use available standards and tools (such as TOSCA and Cloudify) for automated deployment in multiple CSPs.},
journal = {ACM Trans. Priv. Secur.},
month = {nov},
articleno = {2},
numpages = {37},
keywords = {optimization, Cryptographic access control, architecture}
}

@inproceedings{10.1145/3351556.3351586,
author = {Cico, Orges and Cico, Betim},
title = {Reliable Cloud Software Development Architectures and Business Models Case Study: RIDEaaS and GAE Launcher},
year = {2019},
isbn = {9781450371933},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3351556.3351586},
doi = {10.1145/3351556.3351586},
abstract = {Development of cloud applications directly on the cloud infrastructure has become a common approach. Reliability concerns have also become more of a challenge during the last years. Our goal is to assert the potentials deriving from an integrated development environment, adopting software reliability concepts and fault tolerant techniques, as part of the cloud core services. As a methodology, we propose the implementation of a new cloud service Reliable Integrated Development Environment as a Service to become part of the existing core services. Our objectives are to 1) fulfill the need of having a development environment independent from personal desktop environments; 2) code development environment should be offered directly from the cloud service providers. With fault tolerant technique integration, we also suggest that the reliability of the cloud system should be handled from the cloud developers at software level when cloud quality assurance services fail to do so at their different levels. We also propose potential business models to become part of this core service for the major cloud providers. We introduce a new High Availability Coding model providing a roadmap for the future.},
booktitle = {Proceedings of the 9th Balkan Conference on Informatics},
articleno = {32},
numpages = {8},
keywords = {Cloud systems, cloud software development, cloud SDK, reliable integrated development environment},
location = {Sofia, Bulgaria},
series = {BCI'19}
}

@inproceedings{10.5555/3432601.3432616,
author = {Podolskiy, Vladimir and Patrou, Maria and Patros, Panos and Gerndt, Michael and Kent, Kenneth B.},
title = {The Weakest Link: Revealing and Modeling the Architectural Patterns of Microservice Applications},
year = {2020},
publisher = {IBM Corp.},
address = {USA},
abstract = {Cloud microservice applications comprise interconnected services packed into containers. Such applications generate complex communication patterns among their microservices. Studying such patterns can support assuring various quality attributes, such as autoscaling for satisfying performance, availability and scalability, or targeted penetration testing for satisfying security and correctness. We study the structure of containerized microservice applications via providing the methodology and the results of a structural graph-based analysis of 103 Docker Compose deployment files from open-sourced Github repositories. Our findings indicate the dominance of a power-law distribution of microservice interconnections. Further analysis highlights the suitability of the Barab\'{a}si-Albert model for generating large random graphs that model the architecture of real microservice applications. The exhibited structures and their usage for engineering microservice applications are discussed.},
booktitle = {Proceedings of the 30th Annual International Conference on Computer Science and Software Engineering},
pages = {113–122},
numpages = {10},
keywords = {cloud-native application, application topology, microservice, software vulnerability},
location = {Toronto, Ontario, Canada},
series = {CASCON '20}
}

@INPROCEEDINGS{8705907,
author={Rademacher, Florian and Sorgalla, Jonas and Sachweh, Sabine and Zündorf, Albert},
booktitle={2019 IEEE International Conference on Service-Oriented System Engineering (SOSE)}, title={Viewpoint-Specific Model-Driven Microservice Development with Interlinked Modeling Languages},
year={2019},
volume={},
number={},
pages={57-5709},
abstract={Microservice Architecture (MSA) is a novel approach to the development and deployment of distributed, service-oriented software architectures. To this end, MSA puts a strong emphasis on service-specific independence regarding functional, technological, and organizational aspects. Based on that independence, MSA fosters the adoption of agile and DevOps-based development practices. On the other hand, Model-driven Development (MDD) is a software engineering approach that abstracts a software's design leveraging models. In particular, the development of complex, distributed software architectures is considered to benefit from MDD techniques like dedicated modeling languages, model validation, and model transformation. In this paper, we present an approach to employ MDD for MSA engineering. Therefore, we introduce a set of modeling languages for a model-driven workflow of microservice development in distributed, DevOps-based teams. The workflow considers the different DevOps roles of the teams' members on the basis of dedicated modeling viewpoints. Each modeling viewpoint clusters the modeling concerns of a certain DevOps role and is captured in its own metamodel. Starting from the metamodels, a set of modeling languages is derived to practically enable team members to construct models for their specific viewpoint on the microservice architecture. To foster the collaboration among team members of different DevOps roles, the metamodels and hence the modeling languages are interlinked. This interlinkage enables model reuse across viewpoints and subsequent composition of comprehensive architectural models of MSA-based software systems.},
keywords={Unified modeling language;Object oriented modeling;Software systems;Space vehicles;Containers;Resource management;Service-oriented systems engineering;Model-driven development;Software architecture;Software design},
doi={10.1109/SOSE.2019.00018},
ISSN={2642-6587},
month={April},}
@INPROCEEDINGS{9226287,
author={Rademacher, Florian and Sachweh, Sabine and Zündorf, Albert},
booktitle={2020 46th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)}, title={Deriving Microservice Code from Underspecified Domain Models Using DevOps-Enabled Modeling Languages and Model Transformations},
year={2020},
volume={},
number={},
pages={229-236},
abstract={Domain-driven Design (DDD) is a model-based software design methodology, which focuses on close collaboration of domain experts and software engineers. It promotes to capture relevant domain concepts in domain models in order to define a ubiquitous language, whose terms are well understood by stakeholders and consistently used throughout the software engineering process. DDD is considered particularly useful in Microservice Architecture (MSA) engineering, because it specifies patterns to structure modeled domain concepts in isolated contexts. These contexts determine concepts' applicability and validity, and make relationships between domain concepts beyond context boundaries explicit. Consequently, DDD contexts may be used to prescribe microservices' granularities and interaction relationships. However, domain models are usually underspecified, which facilitates communication with domain experts, but hampers the derivation of microservice code.In this paper, we present a model-driven methodology towards deriving microservice code from underspecified domain models. It relies on a set of viewpoint-based MSA modeling languages, which respect the concerns of DevOps teams, and a set of automatic model transformations, which decrease modeling effort and systematize source code derivation. We validate the applicability of our methodology by means of two case studies.},
keywords={Unified modeling language;Context modeling;Data models;Biological system modeling;Computational modeling;Stakeholders;Software;Services Architectures;Services Engineering;Modeling of computer architecture},
doi={10.1109/SEAA51224.2020.00047},
ISSN={},
month={Aug},}
@INPROCEEDINGS{8906894,
author={Jumagaliyev, Assylbek and Elkhatib, Yehia},
booktitle={2019 ACM/IEEE 22nd International Conference on Model Driven Engineering Languages and Systems (MODELS)}, title={A Modelling Language to Support the Evolution of Multi-tenant Cloud Data Architectures},
year={2019},
volume={},
number={},
pages={139-149},
abstract={Multi-tenant data architectures enable efficient resource utilization in cloud applications, but are currently being implemented in industry and research using manual coding techniques that tend to be time consuming and error prone. We propose a novel domain-specific modeling language, CadaML, to automatically manage the development and evolution of cloud data architectures that (a) adopt multi-tenancy and/or (b) comprise of a combination of different storage solutions such as relational and non-relational databases, and blob storage. CadaML provides concepts and notations to support abstract modelling of a multi-tenant data architecture, and also provides tools to validate the data architecture and automatically produce application code. We rigorously evaluate CadaML through a user experiment where developers of various capabilities are asked to re-architect the data layer of an industrial business process analysis application. We observe that CadaML users required 3.5x less development time than manual coders. In addition to improved productivity, CadaML users highlighted other benefits gained in terms of reliability of generated code and usability.},
keywords={Domain-Specific modeling;Model-Driven Engineering;Cloud Computing;Multi-tenancy;Software Evolution;Code Generation},
doi={10.1109/MODELS.2019.000-7},
ISSN={},
month={Sep.},}
@INPROCEEDINGS{8814517,
author={Jumagaliyev, Assylbek and Elkhatib, Yehia},
booktitle={2019 IEEE 12th International Conference on Cloud Computing (CLOUD)}, title={CadaML: A Modeling Language for Multi-Tenant Cloud Application Data Architectures},
year={2019},
volume={},
number={},
pages={430-434},
abstract={Multi-tenancy is used for efficient resource utilization when cloud resources are shared across multiple customers. In cloud applications, the data layer is often the prime candidate for multi-tenancy, and usually comprises a combination of different cloud storage solutions such as relational and non-relational databases, and blob storage. Each of these storage types is different, requiring its own partitioning schemes to ensure tenant isolation and scalability. Current multi-tenant data architectures are implemented mainly through manual coding techniques that tend to be time consuming and error prone. As an alternative, we propose a domain-specific modeling language, CadaML, that provides concepts and notations to model a multi-tenant data architecture in an abstract way. CadaML also provides tools to validate the data architecture and automatically produce application code to implement said architecture.},
keywords={Domain-Specific modeling;Cloud Computing;Multi-tenancy;Software Evolution;Code Generation},
doi={10.1109/CLOUD.2019.00075},
ISSN={2159-6190},
month={July},}
@ARTICLE{9371712,
author={Siriweera, Akila and Naruse, Keitaro},
journal={IEEE Access}, title={Survey on Cloud Robotics Architecture and Model-Driven Reference Architecture for Decentralized Multicloud Heterogeneous-Robotics Platform},
year={2021},
volume={9},
number={},
pages={40521-40539},
abstract={Robotics engineering is gradually becoming an essential part of our daily life. However, it has been generating Big Data and seeking large computation cost because of the diversified sensors and processing requirements involved in heterogeneous robotics and their workflows. Therefore, cloud computing has become the incumbent platform for robotics. There are numerous works related to the architecture for cloud robotics. However, most cloud robotics architectures are ad hoc and are not based on a model. Inherent drawbacks of ad hoc approaches include being strictly domain specific and minimally customizable and adaptable. Moreover, heterogeneous cloud robotics platforms have been operating diverse requirements of industries and households. Nevertheless, there are certain benchmarks set to be achieved by Industry 4.0 and norms by Society 5.0. Those benchmarks and norms lead to new products and services in cross industries and alleviate the impending drawbacks. However, those should be achieved while retaining both the sovereignty and security of the respective systems and industries. This is equally applicable and an enormous challenge to the system-of-systems involving the cloud robotics domain. Therefore, we surveyed cloud robotics architectures. Then, we learned a top-down design approach involving a unified architectural framework as the cognitive approach for the highly variable and systematically complex challenges to be achieved in the next-generation cloud robotics domain. Reference architecture is a well-known approach for instantiating top-down unified architectural framework processes. Therefore, we proposed an architectural design process and modeling for the reference architecture for next-generation cloud robotics platforms.},
keywords={Robots;Cloud computing;Service robots;Computer architecture;Industries;Robot sensing systems;Big Data;Cloud robotics;Industry 40;model-driven;reference architecture;Society 50},
doi={10.1109/ACCESS.2021.3064192},
ISSN={2169-3536},
month={},}
@ARTICLE{9491992,
author={Amiri, Amirali and Zdun, Uwe and Van Hoorn, Andre},
journal={IEEE Transactions on Services Computing}, title={Modeling and Empirical Validation of Reliability and Performance Trade-Offs of Dynamic Routing in Service- and Cloud-Based Architectures},
year={2021},
volume={},
number={},
pages={1-1},
abstract={Context: Various patterns of dynamic routing architectures are used in service- and cloud-based environments, including sidecar-based routing, routing through a central entity such as an event store, or architectures with multiple dynamic routers. <i>Objective:</i> Choosing the wrong architecture may severely impact the reliability or performance of a software system. This articles objective is to provide models and empirical evidence to precisely estimate the reliability and performance impacts. <i>Method:</i> We propose an analytical model of request loss for reliability modeling. We studied the accuracy of this models predictions empirically and calculated the error rate in 200 experiment runs, during which we measured the round-trip time performance and created a performance model based on multiple regression analysis. Finally, we systematically analyzed the reliability and performance impacts and trade-offs. <i>Results and Conclusions:</i> The comparison of the empirical data to the reliability models predictions shows a low enough and converging error rate for using the model during system architecting. The predictions of the performance model show that distributed approaches for dynamic data routing have a better performance compared to centralized solutions. Our results provide important new insights on dynamic routing architecture decisions to precisely estimate the trade-off between system reliability and performance.},
keywords={Reliability;Routing;Computer architecture;Analytical models;Predictive models;Software reliability;Computational modeling;Cloud-Based Computing;Service-Based Applications;Dynamic Routing Architectures;System Reliability;Performance},
doi={10.1109/TSC.2021.3098178},
ISSN={1939-1374},
month={},}
@INPROCEEDINGS{8887075,
author={Nisar, Farhan and Baseer, Samad and khan, Arshad},
booktitle={2019 International Symposium on Recent Advances in Electrical Engineering (RAEE)}, title={Survey on ARIMA Model Workloads in a DataCenter with respect to Cloud Architecture},
year={2019},
volume={4},
number={},
pages={1-4},
abstract={Resource administration in a data center is a dire function that affects the operational cost (OPEX) of data center providers and the applications' Service Level Agreement (SLA). Efficient resource management can maximize the resource utilization and guarantee each application's SLA. Accurately predicting each application's workload is a key requirement to provision an efficient resource management. Overestimating or underestimating the application workload results in the resource overprovisioning or under provisioning. In this paper, we apply ARIMA model specific workload application in the data center. ARIMA can automatically analyze the characteristics of the application workload time series and then applies different mathematical models to fit the corresponding application workload time series. The performance of the ARIMA based prediction model is tested through extensive simulations. By selecting the appropriate parameters of the ARIMA model by using the existing methods, the average application workload prediction errors during the day and the month are calculated (i.e., 7.01% and 6.73%, respectively) to provide the accuracy of ARIMA prediction model.},
keywords={Predictive models;Time series analysis;Resource management;Data centers;Servers;Prediction algorithms;Data models;Prediction Model;Simulation Result;Related Work;Comparison Survey},
doi={10.1109/RAEE.2019.8887075},
ISSN={},
month={Aug},}
@INPROCEEDINGS{8703913,
author={Rademacher, Florian and Sachweh, Sabine and Zündorf, Albert},
booktitle={2019 IEEE International Conference on Software Architecture (ICSA)}, title={Aspect-Oriented Modeling of Technology Heterogeneity in Microservice Architecture},
year={2019},
volume={},
number={},
pages={21-30},
abstract={Microservice Architecture (MSA) is a novel approach for the development and deployment of service-based software systems. MSA puts a strong emphasis on loose coupling and high cohesion of services. This increases service-specific independence, which is considered to result in a better scalability, adaptability, and quality of software architectures. Another perceived benefit of adopting MSA is technology heterogeneity. Microservice teams are free to employ the technologies they deem to be most appropriate for service implementation and operation. However, technology heterogeneity increases the number of technologies in a microservice architecture with the risk to introduce technical debt and steeper learning curves for team members. In this paper, we present an approach to streamline the usage of different technologies in MSA-based software systems. It employs Aspect-oriented Modeling to make technology decisions in microservice architectures explicit and enable reasoning about them. Therefore, a set of languages for model-driven microservice development is extended with means to define, modularize, and apply MSA technology aspects. The usage and characteristics of our approach are shown and discussed in the context of a case study from the mobility domain.},
keywords={Computer architecture;Software systems;Resource management;Software architecture;Scalability;Modeling;Cognition;Service-oriented systems engineering;Model-driven development;Software architecture;Software design},
doi={10.1109/ICSA.2019.00011},
ISSN={},
month={March},}
@INPROCEEDINGS{8705818,
author={Haselböck, Stefan and Weinreich, Rainer and Buchgeher, Georg},
booktitle={2019 IEEE International Conference on Service-Oriented System Engineering (SOSE)}, title={Using Decision Models for Documenting Microservice Architectures: A Student Experiment and Focus Group Study},
year={2019},
volume={},
number={},
pages={37-3709},
abstract={Microservice architecture focuses on splitting up software systems into a suite of services to support independence at the development, deployment, and operational levels. To support this independence, the introduction of a microservice architecture also requires changes to the team organization and operational infrastructure. As a consequence, introducing a microservice architecture requires decisions related to design, organization, and infrastructure in a number of different areas. We use the concept of decision models to support decision makers not only in making but also in documenting microservice architectural decisions. To evaluate our approach for microservice decision documentation, we conducted an experiment and a subsequent focus group study with 44 graduate students in computer science and information systems. Our results indicate that using decision models enhances the completeness of the created decision documentation, and was also perceived as being helpful by the study participants.},
keywords={Documentation;Computer architecture;Computational modeling;Software architecture;Companies;Atmospheric measurements;Particle measurements;software architecture;microservices;decision models;decision documentation;experiment;focus group study},
doi={10.1109/SOSE.2019.00016},
ISSN={2642-6587},
month={April},}
@INPROCEEDINGS{9233043,
author={Yussupov, Vladimir and Breitenbücher, Uwe and Krieger, Christoph and Leymann, Frank and Soldani, Jacopo and Wurster, Michael},
booktitle={2020 IEEE 24th International Enterprise Distributed Object Computing Conference (EDOC)}, title={Pattern-based Modelling, Integration, and Deployment of Microservice Architectures},
year={2020},
volume={},
number={},
pages={40-50},
abstract={Microservice-based architectures (MSAs) gained momentum in industrial and research communities since finer-grained and more independent components foster reuse and reduce time to market. However, to come from the design of MSAs to running applications, substantial knowledge and technology-specific expertise in the deployment and integration of microservices is needed. In this paper, we propose a model-driven and pattern-based approach for composing microservices, which facilitates the transition from architectural models to running deployments. Using a unified modelling for MSAs, including both their integration based on Enterprise Integration Patterns (EIPs) and deployment aspects, our approach enables automatically generating the artefacts for deploying microservice compositions. This helps abstracting away the underlying infrastructure including container orchestration platforms and middleware layer for service integration. To validate the feasibility of our approach, we illustrate its prototypical implementation, with Kubernetes used as container orchestration system and OpenFaaS used for managing integration logic, and we present a case study.},
keywords={Containers;Task analysis;Routing;Standards;Publish-subscribe;Communication channels;Programming;Microservice Architecture;Service Composition;Enterprise Integration Pattern;Model-driven Engineering},
doi={10.1109/EDOC49727.2020.00015},
ISSN={2325-6362},
month={Oct},}
@INPROCEEDINGS{9307715,
author={Jagadeesan, Lalita J. and Mendiratta, Veena B.},
booktitle={2020 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)}, title={When Failure is (Not) an Option: Reliability Models for Microservices Architectures},
year={2020},
volume={},
number={},
pages={19-24},
abstract={Modern application development and deployment is rapidly evolving to microservices based architectures, in which thousands of microservices communicate with one another and can be independently scaled and updated. While these architectures enable flexibility of deployment and frequency of upgrades, the naive use of thousands of communicating and frequently updated microservices can significantly impact the reliability of applications. To address these challenges, service meshes are used to rapidly detect and respond to microservices failures without necessitating changes to the microservices themselves. However, there are inherent tradeoffs that service meshes must make with regards to how quickly they assume a microservice has failed and the subsequent impact on overall application reliability. We present in this paper a modeling framework for microservices and service mesh reliability that takes these tradeoffs into account. Index Terms-microservices, service mesh, sidecars, circuit breakers, reliability, availability, resilience, reliability models, probabilistic model checking, PRISM.},
keywords={Circuit breakers;Reliability;Integrated circuit modeling;Integrated circuit reliability;Steady-state;Computational modeling;Power system protection;microservices, service mesh, sidecars, circuit breakers, reliability, availability, resilience, reliability models, probabilistic model checking, PRISM},
doi={10.1109/ISSREW51248.2020.00031},
ISSN={},
month={Oct},}
@INPROCEEDINGS{9672417,
author={Yilmaz, Rahime and Buzluca, Feza},
booktitle={2021 2nd International Informatics and Software Engineering Conference (IISEC)}, title={A Fuzzy Quality Model to Measure the Maintainability of Microservice Architectures},
year={2021},
volume={},
number={},
pages={1-6},
abstract={Microservice architecture (MSA) is a type of software and systems architecture that is based on the modularization principle. It proposes designing systems employing small-scaled, loosely coupled, and independently deployable microservices. There are several benefits of microservices architecture in terms of maintainability, scalability, and productivity which have led to rise in its popularity. Even though there are several studies about development in MSA, the studies on the quality of the microservice-based systems are limited. In this study, we propose a quality model based on fuzzy logic to measure and assess quality attributes of systems in MSA that can be used by software architects, developers, and project managers. We focus on maintainability of microservices because it is one of the most important quality attributes of software systems. We identified sub-characteristics and properties of microservices that affect maintainability, and constructed a hierarchical quality model based on ISO/IEC 250xy standard SQuaRE (System and Software Quality Requirements and Evaluation). Our fuzzy model measures maintainability of microservices in three levels, i.e., low, medium, and high. We provided a basis for the development and application of quality models in industrial practice as well as a basis for further extension. To demonstrate and evaluate our methodology, we used open-source applications designed in MSA. The results show that our method can assess maintainability of microservices realistically.},
keywords={Fuzzy logic;ISO Standards;Microservice architectures;Systems architecture;Computer architecture;Software systems;Software measurement;Microservices;Microservice Quality;Quality Model;Quality Measurement;Maintainability},
doi={10.1109/IISEC54230.2021.9672417},
ISSN={},
month={Dec},}
@INPROCEEDINGS{8972825,
author={Samir, Areeg and Pahl, Claus},
booktitle={2019 7th International Conference on Future Internet of Things and Cloud (FiCloud)}, title={DLA: Detecting and Localizing Anomalies in Containerized Microservice Architectures Using Markov Models},
year={2019},
volume={},
number={},
pages={205-213},
abstract={Container-based microservice architectures are emerging as a new approach for building distributed applications as a collection of independent services that works together. As a result, with microservices, we are able to scale and update their applications based on the load attributed to each service. Monitoring and managing the load in a distributed system is a complex task as the degradation of performance within a single service will cascade reducing the performance of other dependent services. Such performance degradations may result in anomalous behaviour observed for instance for the response time of a service. This paper presents a Detection and Localization system for Anomalies (DLA) that monitors and analyzes performance-related anomalies in container-based microservice architectures. To evaluate the DLA, an experiment is done using R, Docker and Kubernetes, and different performance metrics are considered. The results show that DLA is able to accurately detect and localize anomalous behaviour.},
keywords={Cloud, Anomaly Detection, Performance, Container, Microservice, HHMM, Correlation Analysis},
doi={10.1109/FiCloud.2019.00036},
ISSN={},
month={Aug},}
@INPROCEEDINGS{8734441,
author={Cedillo, Priscila and García, Andrés and Diego Cárdenas-D, Juan},
booktitle={2019 Sixth International Conference on eDemocracy eGovernment (ICEDEG)}, title={Towards an Architecture for Electronic Notifications Services on the Cloud: A Model Driven Approach},
year={2019},
volume={},
number={},
pages={76-83},
abstract={Cloud computing technology is being adopted by organizations driven by their need to reduce operational costs, and to deliver scalable and flexible services. Solutions deployed on the cloud are a great point of interest in the commercial and governmental area for e-commerce transactions. Here, electronic invoicing applications play a key role in commercial activities, being a branch of vital importance for the business activities. In order to accomplish certain tasks (e.g., collection of overdue invoices, notifications about payment plans) technological solutions have been proposed. Then, it is important to establish architectures that support developers in creating notification solutions in order to send messages about issues of interest for organizations in a proper manner. Moreover, due to the constant changes of laws, a model driven approach can help as a flexible and maintainable option for these solutions. Therefore, this paper proposes an architecture for the creation of electronic notifications, which allows a good communication between organizations and their clients. In this context, a case study is presented in order to demonstrate the instantiation of the proposed architecture in a real scenario.},
keywords={Cloud computing;Computer architecture;Computational modeling;Companies;Web services;cloud computing;web service;e-invoicing;notification;SMS;mail},
doi={10.1109/ICEDEG.2019.8734441},
ISSN={2573-1998},
month={April},}
@INPROCEEDINGS{9141150,
author={Schmidt, Roger Anderson and Thiry, Marcello},
booktitle={2020 15th Iberian Conference on Information Systems and Technologies (CISTI)}, title={Microservices identification strategies : A review focused on Model-Driven Engineering and Domain Driven Design approaches},
year={2020},
volume={},
number={},
pages={1-6},
abstract={A proper architectural design for a microservices system is crucial for its success. Although there are several design strategies to identify software components in general, microservices demands special consideration. In this context of distributed systems, the component size directly impacts on nonfunctional requirements, such as performance, flexibility, reusability, etc. Design practices of coupling and cohesion have to be fine-tuned to determine the ideal microservices granularity. In order to shed light on this question, this study conducted a Systematic Literature Review that investigates microservices identification proposals. From procedures and guidelines inspired by Kitchenham et al., a rigorous research protocol was defined and performed, that covers publications from 2013 to 2019. Starting with an initial screening of 715 papers, 27 studies were considered relevant to answer four research questions. Besides microservices decomposition strategies, this review underlines Model Driven Engineering and Domain Driven Design, once they represent valuable approaches to support this challenging task. Moreover, this work highlights that only a few studies had explored these approaches in their strategies, which opens promising potential for further research.},
keywords={Data models;Unified modeling language;Protocols;Systematics;Proposals;Databases;microservices;identification;decomposition;granularity;MDE;DDD;model-driven;domain-driven.},
doi={10.23919/CISTI49556.2020.9141150},
ISSN={2166-0727},
month={June},}
@INPROCEEDINGS{8884900,
author={Gias, Alim Ul and Casale, Giuliano and Woodside, Murray},
booktitle={2019 IEEE 39th International Conference on Distributed Computing Systems (ICDCS)}, title={ATOM: Model-Driven Autoscaling for Microservices},
year={2019},
volume={},
number={},
pages={1994-2004},
abstract={Microservices based architectures are increasingly widespread in the cloud software industry. Still, there is a shortage of auto-scaling methods designed to leverage the unique features of these architectures, such as the ability to independently scale a subset of microservices, as well as the ease of monitoring their state and reciprocal calls. We propose to address this shortage with ATOM, a model-driven autoscaling controller for microservices. ATOM instantiates and solves at run-time a layered queueing network model of the application. Computational optimization is used to dynamically control the number of replicas for each microservice and its associated container CPU share, overall achieving a fine-grained control of the application capacity at run-time. Experimental results indicate that for heavy workloads ATOM offers around 30%-37% higher throughput than baseline model-agnostic controllers based on simple static rules. We also find that model-driven reasoning reduces the number of actions needed to scale the system as it reduces the number of bottleneck shifts that we observe with model-agnostic controllers.},
keywords={Throughput;Task analysis;Estimation;Atomic layer deposition;Containers;Computational modeling;Computer architecture;microservices;autoscaling;layered queueing network;performance optimization},
doi={10.1109/ICDCS.2019.00197},
ISSN={2575-8411},
month={July},}
@INPROCEEDINGS{9529482,
author={Sun, Chang-ai and Wang, Jing and Liu, Zhenxian and Han, Yanbo},
booktitle={2021 IEEE 45th Annual Computers, Software, and Applications Conference (COMPSAC)}, title={A Variability-Enabling and Model-Driven Approach to Adaptive Microservice-based Systems},
year={2021},
volume={},
number={},
pages={968-973},
abstract={A microservice-based system is composed of numerous independently deployed and executed microservices, among which normally exist the complex dependencies. Traditional service composition approaches usually expect the business process predefined at design time. As a result, it is difficult for the microservice-based system to quickly adapt to the frequently changing operation environments and business requirements. To address the above limitations, we propose a variability-enabling and model-driven approach to developing adaptive microservice-based systems. Our approach first models the business process with variability using VxBPMN4MS, an extension of Business Process Model and Notation (BPMN) with support for variability, then transforms the business process model to variability supported microservice composition frameworks, and finally derives business process instances at run-time according to the predefined process configuration. We have developed a platform to automate the proposed approach as much as possible, and conducted a case study to evaluate the effectiveness of the proposed approach and platform.},
keywords={Adaptation models;Adaptive systems;Computational modeling;Conferences;Transforms;Computer architecture;Software;Microservices;Adaptive Microservice Compositions;Business Process Model and Notation;Variability Modelling;Model-Driven Architecture},
doi={10.1109/COMPSAC51774.2021.00130},
ISSN={0730-3157},
month={July},}
@INPROCEEDINGS{9460175,
author={Afzal, Wasif and Piadehbasmenj, Amirali},
booktitle={2021 10th Mediterranean Conference on Embedded Computing (MECO)}, title={Cloud-Based Architectures for Model-Based Simulation Testing of Embedded Software},
year={2021},
volume={},
number={},
pages={1-8},
abstract={Model-based testing (MBT) generates many test cases for validating a system under test against the user-defined requirements. Cloud computing provides powerful resources that can be utilised to execute these many test cases that would otherwise take much resources locally. Other benefits of utilizing cloud-based resources are elastic and on-demand, rapid provisioning and release of new, potentially value-adding services. Although cloud providers such as Amazon Web Services (AWS) have provided the necessary technologies for successful cloud-based operation, it remains difficult to migrate and hence achieve the realisation of MBT as a service for traditional in-house testing operations, especially for embedded software. In this paper, we present a series of cloud-based architectures powered by AWS and an open-source MBT tool, GraphWalker. These architectures are realized at simulation testing stage for real-world embedded software and particularly cater for online MBT, whereby the model-based tool is deployed as a RESTful web service, accessible through a number of REST API commands. The presented architectures as well as their realization through AWS can be adopted in future for more advanced levels of simulation testing of embedded software.},
keywords={Cloud computing;Embedded computing;Computational modeling;Computer architecture;Tools;Logic gates;Service-oriented architecture;Model-Based Testing;GraphWalker;Cloud;AWS},
doi={10.1109/MECO52532.2021.9460175},
ISSN={2637-9511},
month={June},}
@INPROCEEDINGS{9604966,
author={Schulz, Philipp and Traßl, Andreas and Schwarzenberg, Nick and Fettweis, Gerhard},
booktitle={2021 IEEE 4th 5G World Forum (5GWF)}, title={Analysis and Modeling of Downlink Traffic in Cloud- Rendering Architectures for Augmented Reality},
year={2021},
volume={},
number={},
pages={188-193},
abstract={One way to enable augmented reality (AR) on light-weight glasses, which are limited in battery capacity and computational power, is to shift intense operations from the device to the cloud. Instead of rendering on the device, the cloud could take over this task and stream the results to the device. However, this comes with challenges, such as low latency and high data rates, on the wireless network, especially when multiple users have to be served simultaneously. In order to derive the network requirements and to assess network performance, appropriate traffic models are necessary. Therefore, we study the video traffic in the downlink of such a cloud-rendering architecture, as it accounts for the major part. Furthermore, we expect the cloud-rendered AR video traffic to differ significantly from other video traffic due to latency-critical compression, the sparsity of content per video frame, the dependency between content and human movements, as well as the massive resolution requirements. For this paper we create and analyze a video data set, based on which we propose a realistic traffic model.},
keywords={Performance evaluation;Analytical models;Wireless networks;Computer architecture;Glass;Rendering (computer graphics);Downlink;Augmented Reality;Traffic Modeling},
doi={10.1109/5GWF52925.2021.00040},
ISSN={},
month={Oct},}
@INPROCEEDINGS{8814264,
author={Zdun, Uwe and Ntentos, Evangelos and Plakidas, Konstantinos and El Malki, Amine and Schall, Daniel and Li, Fei},
booktitle={2019 IEEE International Conference on Services Computing (SCC)}, title={On the Design and Architecture of Deployment Pipelines in Cloud- and Service-Based Computing - A Model-Based Qualitative Study},
year={2019},
volume={},
number={},
pages={141-145},
abstract={DevOps and Continuous Delivery (CD) are becoming the de-facto standard for software deployment in the cloud. Deployment pipelines are a core artefact in such practices, but so far their design is largely discussed informally, and existing sources on DevOps and CD practices are often inconsistent or incomplete. The lack of a generic, complete, tool-agnostic, and application-independent treatment of deployment pipeline design and architecture impedes their understanding by human designers and the creation of generic tools that work across different technologies and applications. To alleviate this problem, we have performed a qualitative, in-depth study of 25 deployment practice descriptions by practitioners containing informal deployment pipeline models. From our study we derived a precisely specified model of deployment pipeline architectures. We can show that the formal model substantially increases the precision of the modelling compared to the informally modelled pipelines in the original sources.},
keywords={DevOps;Delivery pipelines;Continuous Delivery;Qualitative study;Software Architecture},
doi={10.1109/SCC.2019.00033},
ISSN={2474-2473},
month={July},}
@INPROCEEDINGS{9089340,
author={Tola, Besmir and Jiang, Yuming and Helvik, Bjarne E.},
booktitle={2020 16th International Conference on the Design of Reliable Communication Networks DRCN 2020}, title={On the Resilience of the NFV-MANO: An Availability Model of a Cloud-native Architecture},
year={2020},
volume={},
number={},
pages={1-7},
abstract={With Network Function Virtualization (NFV), the management and orchestration of network services require a new set of functionalities to be added on top of legacy models of operation. Due to the introduction of the virtualization layer and the decoupling of the network functions and their running infrastructure, the operation models need to include new elements like virtual network functions (VNFs) and a new set of relationships between them and the NFV Infrastructure (NFVI). The NFV Management and Orchestration (MANO) framework plays the key role in managing and orchestrating the NFV infrastructure, network services and the associated VNFs. Failures of the MANO hinders the network ability to react to new service requests or events related to the normal lifecycle operation of network services. Thus, it becomes extremely important to ensure a high level of availability for the MANO architecture. The goal of this work is to model, analyze, and evaluate the impact that different failure modes have on the MANO availability. A model based on Stochastic Activity Networks (SANs), derived from current standard-compliant microservice-based implementations, is proposed as a case study. The case study is used to quantitatively evaluate the steady-state availability and identify the most important parameters influencing the system availability for different deployment configurations.},
keywords={Software;Computer architecture;Aging;Logic gates;Reliability engineering;Communication networks;NFV-MANO;OSM;Availability;SAN models;Docker},
doi={10.1109/DRCN48652.2020.1570604378},
ISSN={},
month={March},}
@INPROCEEDINGS{9388192,
author={Vater, Johannes and Kirschning, Maximilian and Scheurenberg, Dominik and Abel, Dirk and Knoll, Alois},
booktitle={2020 10th International Electric Drives Production Conference (EDPC)}, title={Development of a Cloud- and Edge-Architecture for adaptive model weight optimization of a CNN exemplified by optical detection of hairpin welding},
year={2020},
volume={},
number={},
pages={1-7},
abstract={The beginning of a global reorientation towards an increasingly conscientious approach to nature and the human habitat has been accompanied by changes in industry and society. The automotive industry, where a transition from combustion to electrically powered vehicles is currently underway, is also concerned with this change. In addition to increasing the capacity of the battery, improving the efficiency of the electric motor is essential. To achieve these goals, however, new technologies such as hairpins for the stator are needed. An important process step involves the welding of two pairs of hairpins, which often leads to welding defects. Nevertheless, expert knowledge in this field is limited. Optical monitoring of the welding process with the help of a convolutional neural network (CNN) is a good approach. This approach can compensate for the low level of expert knowledge and detects and classifies welding defects directly in the production line. However, the disadvantage of optical monitoring is that production conditions and the surrounding environment change over time. This has an impact on optical detection and can negatively affect the accuracy of a CNN. For example, the camera perspective can change, which has a negative effect on optical quality monitoring. Therefore, this paper presents an approach for monitoring and evaluating the quality of a CNN in a cloud instance online. If a deteriorating quality is detected, the CNN in the cloud is re-trained by continuously collected data and then automatically deployed to the production line. This allows the CNN to adapt to the changing environmental conditions. The present approach is demonstrated and validated with real data of the stator production process. Compared with the current state-of-the-art, this control loop is highly automated and requires a minimum of human intervention.},
keywords={Industries;Welding;Production;Optical computing;Stators;Monitoring;Optimization;cloud;edge;industry 4.0;image processing;adaptive optimization;hairpin},
doi={10.1109/EDPC51184.2020.9388192},
ISSN={},
month={Dec},}
@INPROCEEDINGS{8845490,
author={Xu, Yiyi and Liu, Pengfei and Zhao, Jun},
booktitle={2019 14th International Conference on Computer Science Education (ICCSE)}, title={A lightweight CaaS private cloud architecture and models for many task computing},
year={2019},
volume={},
number={},
pages={92-96},
abstract={CPU time has long been a remaining problem for large-scale scientific computing. For some less computingintensive but many-task-computing codes, it may take several weeks or even months to run. With the increase of datasets scale, computing time grows dramatically - this hence can be more and more challenging. To address this problem, most solutions based on ongoing hardware and/or software investment. To address this issue, this research is to make the following contributions to literature: a new “Computing performance first” Computing as a Service (CaaS) model to support scientific computing and contribute as a novel high-performance private cloud computing (HPPCC) method. Efficiency of this approach is demonstrated by experiments with numerical simulation on both with End nodes and without End nodes.},
keywords={Cloud computing;Task analysis;Computational modeling;Scientific computing;Computer architecture;Databases;Batch production systems;Computing as a Service;High-performance Private Cloud Computing;Scientific computing;Many-taskcomputing},
doi={10.1109/ICCSE.2019.8845490},
ISSN={2473-9464},
month={Aug},}
@ARTICLE{9133052,
author={Zhang, Chenglei and Liu, Jiajia and Xu, Bo and Yuab, Bo and Zhuang, Shenle and Zhao, Feiyu},
journal={IEEE Access}, title={Architecture of Cloud 3D Printing Task Modeling for Nodes Dynamic Scheduling and Coupling Based on Complex Networks},
year={2020},
volume={8},
number={},
pages={135208-135222},
abstract={To study the variation in resource allocation efficiency in a cloud 3D printing (C3DP) manufacturing grid, C3DP task modeling for a complex network model was established based on the dynamic coupling of nodes, taking cloud manufacturing resource characteristics such as distribution and diversity into account. Based on this idea, we propose an architecture of C3DP task modeling for complex networks based on the dynamic coupling of nodes. First, the model calculates the initial tasks and services by evaluating the quality of the manufacturing resources, and then, according to the strength of the correlations among various tasks and among services and tasks, a multiplex network model based on cloud tasks and services is constructed. Then, according to the description and its constraint structure definition of the C3DP order tasks, by using the intercept method for complex networks, this paper identifies the work breakdown structure of coupling task sets, simplifies the optimization process, and proposes a C3DP order task (C3DPOT) network modeling method. Third, on the basis of the formal description of C3DP service resources, an architecture of C3DP order task methods for complex networks based on the dynamic coupling of nodes is proposed. Finally, a Service_Net model example is designed to verify the feasibility of the method.},
keywords={Task analysis;Three-dimensional printing;Couplings;Dynamic scheduling;Complex networks;Cloud computing;Complex networks;manufacturing resource services;service-oriented manufacturing (SOM);cloud 3D printing;work breakdown structure;dynamic coupling of nodes},
doi={10.1109/ACCESS.2020.3006868},
ISSN={2169-3536},
month={},}
@INPROCEEDINGS{9249479,
author={Basu, Kashinath and Maqousi, Ali and Ball, Frank},
booktitle={2020 12th International Symposium on Communication Systems, Networks and Digital Signal Processing (CSNDSP)}, title={Architecture of an end-to-end energy consumption model for a Cloud Data Center},
year={2020},
volume={},
number={},
pages={1-6},
abstract={Estimates show that a significant proportion of future ICT related energy consumption will be from Cloud Computing. Based on detail analysis and survey of energy consumption and optimization trends in cloud computing, this research presents a comprehensive end-to-end energy consumption model of a cloud facility extending from the end-user equipment to the data center facility. The model is subdivided into three planes and four associated layers and depicts the cross-plane and cross-layer relationships between the components in terms of energy consumption and potential optimization areas and provides a reference framework for planning power optimization strategies at a cloud facility.},
keywords={Cloud computing;Energy consumption;Data centers;Computational modeling;Data models;Planning;Optimization;cloud;data center;energy efficiency;fog;frequency voltage scaling;SDN;power consumption},
doi={10.1109/CSNDSP49049.2020.9249479},
ISSN={},
month={July},}
@INPROCEEDINGS{9384005,
author={Bocciarelli, Paolo and D’Ambrogio, Andrea and Durak, Umut},
booktitle={2020 Winter Simulation Conference (WSC)}, title={ArTIC-M amp;S: An Architecture for Tosca-Based Inter-Cloud Modeling and Simulation},
year={2020},
volume={},
number={},
pages={2018-2029},
abstract={Modeling & Simulation (M&S) techniques have proven their effectiveness for several intended uses, from complex systems analysis to innovative training activities. The emerging M&S-as-a-Service (MSaaS) paradigm deals with the adoption of service-orientation and cloud computing to ease the development and provision of M&S applications. Due to its relevance for the military domain, the NATO MSG-164 is investigating how the MSaaS potential can be exploited to support NATO objectives. In this context, this work proposes ArTIC-MS, a MSaaS architecture that aims at investigating innovative approaches to ease the building of inter-cloud MSaaS applications. ArTIC-MS's main objective is to provide an effective interoperability among M&S services provided by different nations to seamlessly build complex MSaaS applications. Specifically, the work addresses the use of the TOSCA (Topology and Orchestration Specification for Cloud Applications) standard, and also discusses how ArTIC-MS may cope with the orchestration of M&S services available on non-TOSCA infrastructures.},
keywords={Heating systems;Cloud computing;Analytical models;Adaptation models;Computational modeling;Computer architecture;Specification languages},
doi={10.1109/WSC48552.2020.9384005},
ISSN={1558-4305},
month={Dec},}
@INPROCEEDINGS{9592516,
author={Bibartiu, Otto and Dürr, Frank and Rothermel, Kurt},
booktitle={2021 IEEE International Conference on Services Computing (SCC)}, title={Clams: A Cloud Application Modeling Solution},
year={2021},
volume={},
number={},
pages={1-10},
abstract={A wide range of new modeling languages with a specific focus on cloud computing, also known as cloud modeling languages (CMLs), have been introduced to help developers describe, evaluate, and deploy cloud applications. In general, CMLs define applications as interconnected cloud components within an architectural topology. However, in agile software development, developers describe system-level functionalities using user stories or epics to define end-user scenarios. So far, a CML bridging the gap between formal architectural descriptions and the informal scenario descriptions from agile development is missing. We present Clams (Cloud application modeling solution), a scenario-based CML. Clams uses cloud computing patterns as architectural placeholders in combination with message sequence charts. We introduce standard tooling to handle Clams models and show how one can refine patterns to concrete service offerings. Additionally, we also provide a development framework to support the creation of custom tools to evaluate, analyze, or translate Clams models efficiently.},
keywords={Cloud computing;Computational modeling;Architecture;Agile software development;Service computing;Computer architecture;Tools;Cloud Modeling Language;Scenarios;Cloud Computing Patterns},
doi={10.1109/SCC53864.2021.00013},
ISSN={2474-2473},
month={Sep.},}
@INPROCEEDINGS{9603431,
author={Schmidt, Andreas and Reich, Jan and Sorokos, Ioannis},
booktitle={2021 17th European Dependable Computing Conference (EDCC)}, title={Live in ConSerts: Model-Driven Runtime Safety Assurance on Microcontrollers, Edge, and Cloud Practical Experience Report},
year={2021},
volume={},
number={},
pages={61-66},
abstract={Engineering highly-integrated Cyber-Physical Systems (CPS) requires dealing with increased complexity and variability, both within the CPS architecture, but also in the dynamic interactions formed with other CPS during operation. Developing, instrumenting, and deploying effective and efficient monitoring is an essential component of any strategy aiming to assure the dependability of CPS. Such runtime monitors use pre-assured knowledge models, which describe safety-relevant properties of the CPS and its environment. During operation, event monitors determine the current situation and thus enable automated safety reasoning based on the modeled knowledge. Conditional Safety Certificates (ConSerts) are a previously introduced concept for safety-related assume-guarantee reasoning models that enable dynamic adaptation of CPS during operation by exploiting dependability assurance established during development. In this work, we introduce a code generation concept and tool support that enables the automatic synthesis of ConSert-based runtime monitors for CPS in the Rust programming language. We demonstrate and evaluate the feasibility of the concept on a robot-assisted industrial manufacturing use case.},
keywords={Performance evaluation;Adaptation models;Runtime;Codes;Microcontrollers;Biological system modeling;Tools;monitor synthesis;runtime verification;safety monitor;autonomous systems;online assurance},
doi={10.1109/EDCC53658.2021.00016},
ISSN={2641-810X},
month={Sep.},}
@INPROCEEDINGS{8776962,
author={Tegeler, Tim and Gossen, Frederik and Steffen, Bernhard},
booktitle={2019 9th International Conference on Cloud Computing, Data Science Engineering (Confluence)}, title={A Model-driven Approach to Continuous Practices for Modern Cloud-based Web Applications},
year={2019},
volume={},
number={},
pages={1-6},
abstract={In this paper, we propose a model-driven approach to Continuous Software Integration and Deployment (CI/CD) for modern cloud-based applications. Key to our approach is a formal graphical modelling language for the specification of the processes and tasks involved. Based on these specifications the complete CI/CD configurations are generated fully and automatically guaranteeing their correctness with regard to the specification by construction. This way typical sources of critical errors can be avoided lowering the hurdle to introduce CI/CD especially in mature projects. We demonstrate the power of our model-driven approach with the help of an industrial web application - a prime example for cloud-based applications.},
keywords={Pipelines;Syntactics;Servers;Cloud computing;Software;Task analysis;Tools;Continuous Integration;Continuous Deployment;Model-driven;Cloud-based Applications},
doi={10.1109/CONFLUENCE.2019.8776962},
ISSN={},
month={Jan},}
@INPROCEEDINGS{8814534,
author={Brabra, Hayet and Mtibaa, Achraf and Gaaloul, Walid and Benatallah, Boualem and Gargouri, Faiez},
booktitle={2019 IEEE 12th International Conference on Cloud Computing (CLOUD)}, title={Model-Driven Orchestration for Cloud Resources},
year={2019},
volume={},
number={},
pages={422-429},
abstract={Several DevOps tools have emerged to orchestrate cloud resources. However, inherent heterogeneity and complex implementation within these tools make it hard for DevOps users to design required resource-related artifacts. Currently, the defacto standard for cloud resource modeling and orchestration is TOSCA. Nonetheless, TOSCA is usually bound to TOSCA-compliant orchestration tools. Moreover, the actual integration between TOSCA and DevOps tools is still performed using costly coding and in ad-hoc manner. To resolve this, we believe that mapping and translation mechanisms between TOSCA and DevOps tools should be provided. In this paper, we propose a new model-driven approach for cloud resource orchestration. Our approach (i) adopts TOSCA to design resource-related artifacts regardless of a specific DevOps tool; (ii) enables a new model-driven translation technique that serves to translate the designed artifacts using TOSCA into DevOps specific artifacts and (iii) provides Connectors that intend to establish the bridge between DevOps-specific artifacts and the DevOps tools. Our approach provides a powerful enhancement to DevOps productivity and reusability by assisting toward a seamless integration between TOSCA and DevOps tools.},
keywords={Artifact, TOSCA, Orchestration, Transformation, MDE},
doi={10.1109/CLOUD.2019.00074},
ISSN={2159-6190},
month={July},}


@incollection{fazio_model-driven_2020,
	address = {Cham},
	title = {Model-{Driven} {Simulation} for {Performance} {Engineering} of {Kubernetes}-{Style} {Cloud} {Cluster} {Architectures}},
	volume = {1115},
	isbn = {978-3-030-63160-4 978-3-030-63161-1},
	url = {http://link.springer.com/10.1007/978-3-030-63161-1_1},
	language = {en},
	urldate = {2022-02-03},
	booktitle = {Advances in {Service}-{Oriented} and {Cloud} {Computing}},
	publisher = {Springer International Publishing},
	author = {Ghirardini, Federico and Samir, Areeg and Fronza, Ilenia and Pahl, Claus},
	editor = {Fazio, Maria and Zimmermann, Wolf},
	year = {2020},
	doi = {10.1007/978-3-030-63161-1_1},
	note = {Series Title: Communications in Computer and Information Science},
	pages = {7--20},
}

@article{lichtenthaler_requirements_2020,
	title = {Requirements for a model-driven cloud-native migration of monolithic web-based applications},
	volume = {35},
	issn = {2524-8510, 2524-8529},
	url = {http://link.springer.com/10.1007/s00450-019-00414-9},
	doi = {10.1007/s00450-019-00414-9},
	language = {en},
	number = {1-2},
	urldate = {2022-02-03},
	journal = {SICS Software-Intensive Cyber-Physical Systems},
	author = {Lichtenthäler, Robin and Prechtl, Mike and Schwille, Christoph and Schwartz, Tobias and Cezanne, Pascal and Wirtz, Guido},
	month = aug,
	year = {2020},
	pages = {89--100},
}

@article{achilleos_cloud_2019,
	title = {The cloud application modelling and execution language},
	volume = {8},
	issn = {2192-113X},
	url = {https://journalofcloudcomputing.springeropen.com/articles/10.1186/s13677-019-0138-7},
	doi = {10.1186/s13677-019-0138-7},
	abstract = {Abstract
            Cloud computing offers a flexible pay-as-you-go model for provisioning application resources, which enables applications to scale on-demand based on the current workload. In many cases, though, users face the single vendor lock-in effect, missing opportunities for optimal and adaptive application deployment across multiple clouds. Several cloud modelling languages have been developed to support multi-cloud resource management, but still they lack holistic cloud management of all aspects and phases. This work defines the Cloud Application Modelling and Execution Language (CAMEL), which (i) allows users to specify the full set of design time aspects for multi-cloud applications, and (ii) supports the models@runtime paradigm that enables capturing an application’s current state facilitating its adaptive provisioning. CAMEL has been already used in many projects, domains and use cases due to its wide coverage of cloud management features. Finally, CAMEL has been positively evaluated in this work in terms of its usability and applicability in several domains (e.g., data farming, flight scheduling, financial services) based on the technology acceptance model (TAM).},
	language = {en},
	number = {1},
	urldate = {2022-02-03},
	journal = {Journal of Cloud Computing},
	author = {Achilleos, Achilleas P. and Kritikos, Kyriakos and Rossini, Alessandro and Kapitsaki, Georgia M. and Domaschka, Jörg and Orzechowski, Michal and Seybold, Daniel and Griesinger, Frank and Nikolov, Nikolay and Romero, Daniel and Papadopoulos, George A.},
	month = dec,
	year = {2019},
	pages = {20},
}

@article{mouratidis_security_2020,
	title = {A security requirements modelling language for cloud computing environments},
	volume = {19},
	issn = {1619-1366, 1619-1374},
	url = {http://link.springer.com/10.1007/s10270-019-00747-8},
	doi = {10.1007/s10270-019-00747-8},
	language = {en},
	number = {2},
	urldate = {2022-02-03},
	journal = {Software and Systems Modeling},
	author = {Mouratidis, Haralambos and Shei, Shaun and Delaney, Aidan},
	month = mar,
	year = {2020},
	pages = {271--295},
}

@incollection{la_rosa_data_2021,
	address = {Cham},
	title = {Data and {Cloud} {Polymorphic} {Application} {Modelling} in {Multi}-clouds and {Fog} {Environments}},
	volume = {12751},
	isbn = {978-3-030-79381-4 978-3-030-79382-1},
	url = {https://link.springer.com/10.1007/978-3-030-79382-1_27},
	language = {en},
	urldate = {2022-02-03},
	booktitle = {Advanced {Information} {Systems} {Engineering}},
	publisher = {Springer International Publishing},
	author = {Verginadis, Yiannis and Kritikos, Kyriakos and Patiniotakis, Ioannis},
	editor = {La Rosa, Marcello and Sadiq, Shazia and Teniente, Ernest},
	year = {2021},
	doi = {10.1007/978-3-030-79382-1_27},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {449--464},
}


@incollection{gregory_towards_2021,
	address = {Cham},
	title = {Towards {Integrating} {Blockchains} with {Microservice} {Architecture} {Using} {Model}-{Driven} {Engineering}},
	volume = {426},
	isbn = {978-3-030-88582-3 978-3-030-88583-0},
	url = {https://link.springer.com/10.1007/978-3-030-88583-0_16},
	abstract = {Abstract
            Blockchain presents a feasible method to persist immutable information in a distributed ledger to improve the level of authentication and trust. Moreover, smart contracts enable the automated execution of any contract concluded between participants of the Blockchain network. On the other hand, Microservice Architecture (MSA) is a novel approach towards service-based scalable applications. In our paper, we present an approach based on Model-Driven Engineering (MDE) that aims to facilitate the integration process of Blockchains into MSA-based applications in order to benefit from the advantages attributed to Blockchains.},
	language = {en},
	urldate = {2022-02-03},
	booktitle = {Agile {Processes} in {Software} {Engineering} and {Extreme} {Programming} – {Workshops}},
	publisher = {Springer International Publishing},
	author = {Trebbau, Simon and Wizenty, Philip and Sachweh, Sabine},
	editor = {Gregory, Peggy and Kruchten, Philippe},
	year = {2021},
	doi = {10.1007/978-3-030-88583-0_16},
	note = {Series Title: Lecture Notes in Business Information Processing},
	pages = {167--175},
}

@incollection{damiani_jolie_2021,
	address = {Cham},
	title = {Jolie and {LEMMA}: {Model}-{Driven} {Engineering} and {Programming} {Languages} {Meet} on {Microservices}},
	volume = {12717},
	isbn = {978-3-030-78141-5 978-3-030-78142-2},
	shorttitle = {Jolie and {LEMMA}},
	url = {https://link.springer.com/10.1007/978-3-030-78142-2_17},
	language = {en},
	urldate = {2022-02-03},
	booktitle = {Coordination {Models} and {Languages}},
	publisher = {Springer International Publishing},
	author = {Giallorenzo, Saverio and Montesi, Fabrizio and Peressotti, Marco and Rademacher, Florian and Sachweh, Sabine},
	editor = {Damiani, Ferruccio and Dardha, Ornela},
	year = {2021},
	doi = {10.1007/978-3-030-78142-2_17},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {276--284},
}

@incollection{bucchiarone_graphical_2020,
	address = {Cham},
	title = {Graphical and {Textual} {Model}-{Driven} {Microservice} {Development}},
	isbn = {978-3-030-31645-7 978-3-030-31646-4},
	url = {http://link.springer.com/10.1007/978-3-030-31646-4_7},
	language = {en},
	urldate = {2022-02-03},
	booktitle = {Microservices},
	publisher = {Springer International Publishing},
	author = {Rademacher, Florian and Sorgalla, Jonas and Wizenty, Philip and Sachweh, Sabine and Zündorf, Albert},
	editor = {Bucchiarone, Antonio and Dragoni, Nicola and Dustdar, Schahram and Lago, Patricia and Mazzara, Manuel and Rivera, Victor and Sadovykh, Andrey},
	year = {2020},
	doi = {10.1007/978-3-030-31646-4_7},
	pages = {147--179},
}

@incollection{bruel_model-driven_2020,
	address = {Cham},
	title = {A {Model}-{Driven} {Approach} {Towards} {Automatic} {Migration} to {Microservices}},
	volume = {12055},
	isbn = {978-3-030-39305-2 978-3-030-39306-9},
	url = {http://link.springer.com/10.1007/978-3-030-39306-9_2},
	language = {en},
	urldate = {2022-02-03},
	booktitle = {Software {Engineering} {Aspects} of {Continuous} {Development} and {New} {Paradigms} of {Software} {Production} and {Deployment}},
	publisher = {Springer International Publishing},
	author = {Bucchiarone, Antonio and Soysal, Kemal and Guidi, Claudio},
	editor = {Bruel, Jean-Michel and Mazzara, Manuel and Meyer, Bertrand},
	year = {2020},
	doi = {10.1007/978-3-030-39306-9_2},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {15--36},
}
