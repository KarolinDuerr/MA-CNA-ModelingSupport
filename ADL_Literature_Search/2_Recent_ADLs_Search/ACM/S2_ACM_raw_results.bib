@inproceedings{10.1145/3297280.3300182,
author = {Rademacher, Florian and Sorgalla, Jonas and Sachweh, Sabine and Z\"{u}ndorf, Albert},
title = {A Model-Driven Workflow for Distributed Microservice Development},
year = {2019},
isbn = {9781450359337},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3297280.3300182},
doi = {10.1145/3297280.3300182},
abstract = {Model-driven Development (MDD) is a software engineering approach that abstracts a software's design leveraging models. In particular, the development of complex, service-based architectures is considered to benefit from MDD techniques like model validation, transformation, and code generation. This paper presents an MDD-based workflow for distributed, DevOps-based microservice development and identifies the involved model types. They provide the foundation for the subsequent development of modeling languages to employ MDD for MSA engineering.},
booktitle = {Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing},
pages = {1260–1262},
numpages = {3},
keywords = {distributed microservice development, modeling languages, viewpoint modeling, microservice architecture, model-driven microservice development},
location = {Limassol, Cyprus},
series = {SAC '19}
}

@inproceedings{10.1145/3411564.3411629,
author = {Villa\c{c}a, Lu\'{\i}s Henrique Neves and Azevedo, Leonardo Guerreiro and Siqueira, Sean Wolfgand Matsui},
title = {Microservice Architecture for Multistore Database Using Canonical Data Model},
year = {2020},
isbn = {9781450388733},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3411564.3411629},
doi = {10.1145/3411564.3411629},
abstract = { In a microservice architecture, solutions are created by teams focused on specific domains and needs. They independently develop and deploy distributed services in the network. One characteristic of microservices is decentralized data management. Each microservice may use different data management technology which best fit its needs. Hence, it is an issue to integrate data of heterogenous microservices to come up with consolidate data views. Flexible and efficient solutions in this scenario are needed. This work is based on the use of a canonical data model as the mechanism for data integration in microservices. The canonical data model is the reference for query specifications and data integration. This work proposes and implements a microservice architecture based on this strategy and it is composed by nodes that intercommunicate through several mechanisms (e.g., SPARQL, GraphQL and JDBC queries, calls to REST services and proprietary APIs). The solution was analyzed in a proof of concept in a fictitious scenario but using real services available at DBPedia and Twitter. The evaluation goal was to qualitatively analyze the use of the architecture in the design, development and execution of microservices in order to identify the characteristics one should consider when using the canonical data model strategy. The evaluation employed the criteria of ISO/IEC 25010 model that most relate to the SOA challenges, which were: usability; performance; compatibility; and, maintainability. The identified advantages and disadvantages of using the architecture (i.e., the strategy) can be used by architects and developers to make their development decisions.},
booktitle = {XVI Brazilian Symposium on Information Systems},
articleno = {20},
numpages = {8},
keywords = {service-oriented architecture, polyglot persistence, multistore, microservice architecture, canonical data model},
location = {S\~{a}o Bernardo do Campo, Brazil},
series = {SBSI'20}
}

@inproceedings{10.1145/3338906.3341185,
author = {Tundo, Alessandro and Mobilio, Marco and Orr\`{u}, Matteo and Riganelli, Oliviero and Guzm\`{a}n, Michell and Mariani, Leonardo},
title = {VARYS: An Agnostic Model-Driven Monitoring-as-a-Service Framework for the Cloud},
year = {2019},
isbn = {9781450355728},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3338906.3341185},
doi = {10.1145/3338906.3341185},
abstract = {Cloud systems are large scalable distributed systems that must be carefully monitored to timely detect problems and anomalies. While a number of cloud monitoring frameworks are available, only a few solutions address the problem of adaptively and dynamically selecting the indicators that must be collected, based on the actual needs of the operator. Unfortunately, these solutions are either limited to infrastructure-level indicators or technology-specific, for instance, they are designed to work with OpenStack but not with other cloud platforms. This paper presents the VARYS monitoring framework, a technology-agnostic Monitoring-as-a-Service solution that can address KPI monitoring at all levels of the Cloud stack, including the application-level. Operators use VARYS to indicate their monitoring goals declaratively, letting the framework to perform all the operations necessary to achieve a requested monitoring configuration automatically. Interestingly, the VARYS architecture is general and extendable, and can thus be used to support increasingly more platforms and probing technologies.},
booktitle = {Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1085–1089},
numpages = {5},
keywords = {Monitoring-as-a-Service, Monitoring Framework, Cloud computing},
location = {Tallinn, Estonia},
series = {ESEC/FSE 2019}
}

@inbook{10.1145/3444757.3485108,
author = {Morais, Gabriel and Bork, Dominik and Adda, Mehdi},
title = {Towards an Ontology-Driven Approach to Model and Analyze Microservices Architectures},
year = {2021},
isbn = {9781450383141},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3444757.3485108},
abstract = {Microservices Architectures (MSAs) are continuously replacing monolithic systems toward achieving more flexible and maintainable service-oriented software systems. However, the shift toward an MSA also requires a technological and managerial shift for its adopters. Architecting and managing MSAs represent unique challenges, including microservices' identification, interoperability, and reuse. To handle these challenges, we propose an Ontology-driven Conceptual Modelling approach, based on the Ontology of Microservices Architecture Concepts (OMSAC), for modelling and analyzing microservices-based systems. We show, how OMSAC-based conceptual models, stocked in a Stardog triple store, support Stakeholder-specific communication, documentation, and reuse. This paper reports on the application of our approach in three open-source MSA systems with a focus on microservices' discovery based on similarity metrics. Eventually, we compare the extracted similarity metrics derived from the application of machine learning techniques to the OMSAC models with a manual analysis performed by experts.},
booktitle = {Proceedings of the 13th International Conference on Management of Digital EcoSystems},
pages = {79–86},
numpages = {8}
}

@inbook{10.1145/3341105.3374065,
author = {Sorgalla, Jonas and Rademacher, Florian and Sachweh, Sabine and Z\"{u}ndorf, Albert},
title = {Modeling Microservice Architecture: A Comparative Experiment towards the Effectiveness of Two Approaches},
year = {2020},
isbn = {9781450368667},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3341105.3374065},
abstract = {Microservice Architecture denotes an architectural style for software systems whereby business capabilities are encapsulated in autonomous services. Model-driven Development is considered as means to foster the efficient development of such systems. It can be used to address complexity and tedious development tasks, e.g., by using code generation. In this short paper, we present two modeling approaches for describing microservice architecture and compare them. The first is based on domain-specific modeling languages, the second on the Unified Modeling Language. We comparatively evaluated both approaches in a student experiment with 32 participants. First results of the experiment indicate that students commit fewer modeling errors while using the set of domain-specific modeling languages.},
booktitle = {Proceedings of the 35th Annual ACM Symposium on Applied Computing},
pages = {1506–1509},
numpages = {4}
}

@inproceedings{10.1145/3381991.3395610,
author = {Fern\'{a}ndez, Maribel and Franch Tapia, Alex and Jaimunk, Jenjira and Martinez Chamorro, Manuel and Thuraisingham, Bhavani},
title = {A Data Access Model for Privacy-Preserving Cloud-IoT Architectures},
year = {2020},
isbn = {9781450375689},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3381991.3395610},
doi = {10.1145/3381991.3395610},
abstract = {We propose a novel data collection and data sharing model for cloud-IoT architectures with an emphasis on data privacy. This model has been implemented in Privasee, an open source platform for privacy-aware web-application development, which provides a plug-in module to support IoT application development. Privasee uses a cloud-IoT architecture called DataBank. We provide examples and discuss future extensions.},
booktitle = {Proceedings of the 25th ACM Symposium on Access Control Models and Technologies},
pages = {191–202},
numpages = {12},
keywords = {data privacy, privacy-preserving platform, internet of things, access control, privacy policy, data collection},
location = {Barcelona, Spain},
series = {SACMAT '20}
}

@inproceedings{10.1145/3368235.3368840,
author = {Kritikos, Kyriakos and Skrzypek, Pawe\l{}},
title = {Are Cloud Modelling Languages Ready for Multi-Cloud?},
year = {2019},
isbn = {9781450370448},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368235.3368840},
doi = {10.1145/3368235.3368840},
abstract = {Multi-cloud computing promises to deliver certain benefits, like performance optimisation and cost reduction. However, most cloud application modelling languages are tight to one cloud platform and do not have the right expressiveness to cover all application lifecycle phases. This survey attempts to review the most important from these languages, which facilitate application provisioning in commercial cloud platforms. The main review goals are to: (a) highlight those languages already or nearly multi-cloud enabled; (b) determine those parts of the remaining languages that must be extended to support multi-cloud application modelling. This review results also lead to drawing some future work directions towards producing an ideal multi-cloud application specification language.},
booktitle = {Proceedings of the 12th IEEE/ACM International Conference on Utility and Cloud Computing Companion},
pages = {51–58},
numpages = {8},
keywords = {evaluation, application, survey, modelling, comparison, multi-cloud},
location = {Auckland, New Zealand},
series = {UCC '19 Companion}
}

@inproceedings{10.1145/3344341.3368805,
author = {Elhabbash, Abdessalam and Jumagaliyev, Assylbek and Blair, Gordon S. and Elkhatib, Yehia},
title = {SLO-ML: A Language for Service Level Objective Modelling in Multi-Cloud Applications},
year = {2019},
isbn = {9781450368940},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3344341.3368805},
doi = {10.1145/3344341.3368805},
abstract = {Cloud modelling languages (CMLs) are designed to assist customers in tackling the diversity of services in the current cloud market. While many CMLs have been proposed in the literature, they lack practical support for automating the selection of services based on the specific service level objectives of a customer's application. We put forward SLO-ML, a novel and generative CML to capture service level requirements. Subsequently, SLO-ML selects the services to honour the customer's requirements and generates the deployment code appropriate to these services. We present the architectural design of SLO-ML and the associated broker that realises the deployment operations. We evaluate SLO-ML using an experimental case study with a group of researchers and developers using a real-world cloud application. We also assess SLO-ML's overheads through empirical scalability tests. We express the promises of SLO-ML in terms of gained productivity and experienced usability, and we highlight its limitations by analysing it as application requirements grow.},
booktitle = {Proceedings of the 12th IEEE/ACM International Conference on Utility and Cloud Computing},
pages = {241–250},
numpages = {10},
keywords = {cloud modelling languages, domain specific language, service level agreements, service level objectives, cloud computing},
location = {Auckland, New Zealand},
series = {UCC'19}
}

@article{10.1145/3474056,
author = {Berlato, Stefano and Carbone, Roberto and Lee, Adam J. and Ranise, Silvio},
title = {Formal Modelling and Automated Trade-off Analysis of Enforcement Architectures for Cryptographic Access Control in the Cloud},
year = {2021},
issue_date = {February 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {25},
number = {1},
issn = {2471-2566},
url = {https://doi.org/10.1145/3474056},
doi = {10.1145/3474056},
abstract = {To facilitate the adoption of cloud by organizations, Cryptographic Access Control (CAC) is the obvious solution to control data sharing among users while preventing partially trusted Cloud Service Providers (CSP) from accessing sensitive data. Indeed, several CAC schemes have been proposed in the literature. Despite their differences, available solutions are based on a common set of entities—e.g., a data storage service or a proxy mediating the access of users to encrypted data—that operate in different (security) domains—e.g., on-premise or the CSP. However, the majority of these CAC schemes assumes a fixed assignment of entities to domains; this has security and usability implications that are not made explicit and can make inappropriate the use of a CAC scheme in certain scenarios with specific trust assumptions and requirements. For instance, assuming that the proxy runs at the premises of the organization avoids the vendor lock-in effect but may give rise to other security concerns (e.g., malicious insiders attackers).To the best of our knowledge, no previous work considers how to select the best possible architecture (i.e., the assignment of entities to domains) to deploy a CAC scheme for the trust assumptions and requirements of a given scenario. In this article, we propose a methodology to assist administrators in exploring different architectures for the enforcement of CAC schemes in a given scenario. We do this by identifying the possible architectures underlying the CAC schemes available in the literature and formalizing them in simple set theory. This allows us to reduce the problem of selecting the most suitable architectures satisfying a heterogeneous set of trust assumptions and requirements arising from the considered scenario to a decidable Multi-objective Combinatorial Optimization Problem (MOCOP) for which state-of-the-art solvers can be invoked. Finally, we show how we use the capability of solving the MOCOP to build a prototype tool assisting administrators to preliminarily perform a “What-if” analysis to explore the trade-offs among the various architectures and then use available standards and tools (such as TOSCA and Cloudify) for automated deployment in multiple CSPs.},
journal = {ACM Trans. Priv. Secur.},
month = {nov},
articleno = {2},
numpages = {37},
keywords = {optimization, Cryptographic access control, architecture}
}

@inproceedings{10.1145/3351556.3351586,
author = {Cico, Orges and Cico, Betim},
title = {Reliable Cloud Software Development Architectures and Business Models Case Study: RIDEaaS and GAE Launcher},
year = {2019},
isbn = {9781450371933},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3351556.3351586},
doi = {10.1145/3351556.3351586},
abstract = {Development of cloud applications directly on the cloud infrastructure has become a common approach. Reliability concerns have also become more of a challenge during the last years. Our goal is to assert the potentials deriving from an integrated development environment, adopting software reliability concepts and fault tolerant techniques, as part of the cloud core services. As a methodology, we propose the implementation of a new cloud service Reliable Integrated Development Environment as a Service to become part of the existing core services. Our objectives are to 1) fulfill the need of having a development environment independent from personal desktop environments; 2) code development environment should be offered directly from the cloud service providers. With fault tolerant technique integration, we also suggest that the reliability of the cloud system should be handled from the cloud developers at software level when cloud quality assurance services fail to do so at their different levels. We also propose potential business models to become part of this core service for the major cloud providers. We introduce a new High Availability Coding model providing a roadmap for the future.},
booktitle = {Proceedings of the 9th Balkan Conference on Informatics},
articleno = {32},
numpages = {8},
keywords = {Cloud systems, cloud software development, cloud SDK, reliable integrated development environment},
location = {Sofia, Bulgaria},
series = {BCI'19}
}

@inproceedings{10.5555/3432601.3432616,
author = {Podolskiy, Vladimir and Patrou, Maria and Patros, Panos and Gerndt, Michael and Kent, Kenneth B.},
title = {The Weakest Link: Revealing and Modeling the Architectural Patterns of Microservice Applications},
year = {2020},
publisher = {IBM Corp.},
address = {USA},
abstract = {Cloud microservice applications comprise interconnected services packed into containers. Such applications generate complex communication patterns among their microservices. Studying such patterns can support assuring various quality attributes, such as autoscaling for satisfying performance, availability and scalability, or targeted penetration testing for satisfying security and correctness. We study the structure of containerized microservice applications via providing the methodology and the results of a structural graph-based analysis of 103 Docker Compose deployment files from open-sourced Github repositories. Our findings indicate the dominance of a power-law distribution of microservice interconnections. Further analysis highlights the suitability of the Barab\'{a}si-Albert model for generating large random graphs that model the architecture of real microservice applications. The exhibited structures and their usage for engineering microservice applications are discussed.},
booktitle = {Proceedings of the 30th Annual International Conference on Computer Science and Software Engineering},
pages = {113–122},
numpages = {10},
keywords = {cloud-native application, application topology, microservice, software vulnerability},
location = {Toronto, Ontario, Canada},
series = {CASCON '20}
}

