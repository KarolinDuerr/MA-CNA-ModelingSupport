@inproceedings{10.1145/3297280.3300182,
author = {Rademacher, Florian and Sorgalla, Jonas and Sachweh, Sabine and Z\"{u}ndorf, Albert},
title = {A Model-Driven Workflow for Distributed Microservice Development},
year = {2019},
isbn = {9781450359337},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3297280.3300182},
doi = {10.1145/3297280.3300182},
abstract = {Model-driven Development (MDD) is a software engineering approach that abstracts a software's design leveraging models. In particular, the development of complex, service-based architectures is considered to benefit from MDD techniques like model validation, transformation, and code generation. This paper presents an MDD-based workflow for distributed, DevOps-based microservice development and identifies the involved model types. They provide the foundation for the subsequent development of modeling languages to employ MDD for MSA engineering.},
booktitle = {Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing},
pages = {1260–1262},
numpages = {3},
keywords = {distributed microservice development, modeling languages, viewpoint modeling, microservice architecture, model-driven microservice development},
location = {Limassol, Cyprus},
series = {SAC '19}
}

@inbook{10.1145/3444757.3485108,
author = {Morais, Gabriel and Bork, Dominik and Adda, Mehdi},
title = {Towards an Ontology-Driven Approach to Model and Analyze Microservices Architectures},
year = {2021},
isbn = {9781450383141},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3444757.3485108},
abstract = {Microservices Architectures (MSAs) are continuously replacing monolithic systems toward achieving more flexible and maintainable service-oriented software systems. However, the shift toward an MSA also requires a technological and managerial shift for its adopters. Architecting and managing MSAs represent unique challenges, including microservices' identification, interoperability, and reuse. To handle these challenges, we propose an Ontology-driven Conceptual Modelling approach, based on the Ontology of Microservices Architecture Concepts (OMSAC), for modelling and analyzing microservices-based systems. We show, how OMSAC-based conceptual models, stocked in a Stardog triple store, support Stakeholder-specific communication, documentation, and reuse. This paper reports on the application of our approach in three open-source MSA systems with a focus on microservices' discovery based on similarity metrics. Eventually, we compare the extracted similarity metrics derived from the application of machine learning techniques to the OMSAC models with a manual analysis performed by experts.},
booktitle = {Proceedings of the 13th International Conference on Management of Digital EcoSystems},
pages = {79–86},
numpages = {8}
}

@inbook{10.1145/3341105.3374065,
author = {Sorgalla, Jonas and Rademacher, Florian and Sachweh, Sabine and Z\"{u}ndorf, Albert},
title = {Modeling Microservice Architecture: A Comparative Experiment towards the Effectiveness of Two Approaches},
year = {2020},
isbn = {9781450368667},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3341105.3374065},
abstract = {Microservice Architecture denotes an architectural style for software systems whereby business capabilities are encapsulated in autonomous services. Model-driven Development is considered as means to foster the efficient development of such systems. It can be used to address complexity and tedious development tasks, e.g., by using code generation. In this short paper, we present two modeling approaches for describing microservice architecture and compare them. The first is based on domain-specific modeling languages, the second on the Unified Modeling Language. We comparatively evaluated both approaches in a student experiment with 32 participants. First results of the experiment indicate that students commit fewer modeling errors while using the set of domain-specific modeling languages.},
booktitle = {Proceedings of the 35th Annual ACM Symposium on Applied Computing},
pages = {1506–1509},
numpages = {4}
}

@inproceedings{10.1145/3344341.3368805,
author = {Elhabbash, Abdessalam and Jumagaliyev, Assylbek and Blair, Gordon S. and Elkhatib, Yehia},
title = {SLO-ML: A Language for Service Level Objective Modelling in Multi-Cloud Applications},
year = {2019},
isbn = {9781450368940},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3344341.3368805},
doi = {10.1145/3344341.3368805},
abstract = {Cloud modelling languages (CMLs) are designed to assist customers in tackling the diversity of services in the current cloud market. While many CMLs have been proposed in the literature, they lack practical support for automating the selection of services based on the specific service level objectives of a customer's application. We put forward SLO-ML, a novel and generative CML to capture service level requirements. Subsequently, SLO-ML selects the services to honour the customer's requirements and generates the deployment code appropriate to these services. We present the architectural design of SLO-ML and the associated broker that realises the deployment operations. We evaluate SLO-ML using an experimental case study with a group of researchers and developers using a real-world cloud application. We also assess SLO-ML's overheads through empirical scalability tests. We express the promises of SLO-ML in terms of gained productivity and experienced usability, and we highlight its limitations by analysing it as application requirements grow.},
booktitle = {Proceedings of the 12th IEEE/ACM International Conference on Utility and Cloud Computing},
pages = {241–250},
numpages = {10},
keywords = {cloud modelling languages, domain specific language, service level agreements, service level objectives, cloud computing},
location = {Auckland, New Zealand},
series = {UCC'19}
}

@inproceedings{10.1145/3351556.3351586,
author = {Cico, Orges and Cico, Betim},
title = {Reliable Cloud Software Development Architectures and Business Models Case Study: RIDEaaS and GAE Launcher},
year = {2019},
isbn = {9781450371933},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3351556.3351586},
doi = {10.1145/3351556.3351586},
abstract = {Development of cloud applications directly on the cloud infrastructure has become a common approach. Reliability concerns have also become more of a challenge during the last years. Our goal is to assert the potentials deriving from an integrated development environment, adopting software reliability concepts and fault tolerant techniques, as part of the cloud core services. As a methodology, we propose the implementation of a new cloud service Reliable Integrated Development Environment as a Service to become part of the existing core services. Our objectives are to 1) fulfill the need of having a development environment independent from personal desktop environments; 2) code development environment should be offered directly from the cloud service providers. With fault tolerant technique integration, we also suggest that the reliability of the cloud system should be handled from the cloud developers at software level when cloud quality assurance services fail to do so at their different levels. We also propose potential business models to become part of this core service for the major cloud providers. We introduce a new High Availability Coding model providing a roadmap for the future.},
booktitle = {Proceedings of the 9th Balkan Conference on Informatics},
articleno = {32},
numpages = {8},
keywords = {Cloud systems, cloud software development, cloud SDK, reliable integrated development environment},
location = {Sofia, Bulgaria},
series = {BCI'19}
}

@inproceedings{10.5555/3432601.3432616,
author = {Podolskiy, Vladimir and Patrou, Maria and Patros, Panos and Gerndt, Michael and Kent, Kenneth B.},
title = {The Weakest Link: Revealing and Modeling the Architectural Patterns of Microservice Applications},
year = {2020},
publisher = {IBM Corp.},
address = {USA},
abstract = {Cloud microservice applications comprise interconnected services packed into containers. Such applications generate complex communication patterns among their microservices. Studying such patterns can support assuring various quality attributes, such as autoscaling for satisfying performance, availability and scalability, or targeted penetration testing for satisfying security and correctness. We study the structure of containerized microservice applications via providing the methodology and the results of a structural graph-based analysis of 103 Docker Compose deployment files from open-sourced Github repositories. Our findings indicate the dominance of a power-law distribution of microservice interconnections. Further analysis highlights the suitability of the Barab\'{a}si-Albert model for generating large random graphs that model the architecture of real microservice applications. The exhibited structures and their usage for engineering microservice applications are discussed.},
booktitle = {Proceedings of the 30th Annual International Conference on Computer Science and Software Engineering},
pages = {113–122},
numpages = {10},
keywords = {cloud-native application, application topology, microservice, software vulnerability},
location = {Toronto, Ontario, Canada},
series = {CASCON '20}
}

@INPROCEEDINGS{8705907,
author={Rademacher, Florian and Sorgalla, Jonas and Sachweh, Sabine and Zündorf, Albert},
booktitle={2019 IEEE International Conference on Service-Oriented System Engineering (SOSE)}, title={Viewpoint-Specific Model-Driven Microservice Development with Interlinked Modeling Languages},
year={2019},
volume={},
number={},
pages={57-5709},
abstract={Microservice Architecture (MSA) is a novel approach to the development and deployment of distributed, service-oriented software architectures. To this end, MSA puts a strong emphasis on service-specific independence regarding functional, technological, and organizational aspects. Based on that independence, MSA fosters the adoption of agile and DevOps-based development practices. On the other hand, Model-driven Development (MDD) is a software engineering approach that abstracts a software's design leveraging models. In particular, the development of complex, distributed software architectures is considered to benefit from MDD techniques like dedicated modeling languages, model validation, and model transformation. In this paper, we present an approach to employ MDD for MSA engineering. Therefore, we introduce a set of modeling languages for a model-driven workflow of microservice development in distributed, DevOps-based teams. The workflow considers the different DevOps roles of the teams' members on the basis of dedicated modeling viewpoints. Each modeling viewpoint clusters the modeling concerns of a certain DevOps role and is captured in its own metamodel. Starting from the metamodels, a set of modeling languages is derived to practically enable team members to construct models for their specific viewpoint on the microservice architecture. To foster the collaboration among team members of different DevOps roles, the metamodels and hence the modeling languages are interlinked. This interlinkage enables model reuse across viewpoints and subsequent composition of comprehensive architectural models of MSA-based software systems.},
keywords={Unified modeling language;Object oriented modeling;Software systems;Space vehicles;Containers;Resource management;Service-oriented systems engineering;Model-driven development;Software architecture;Software design},
doi={10.1109/SOSE.2019.00018},
ISSN={2642-6587},
month={April},}

@INPROCEEDINGS{9226287,
author={Rademacher, Florian and Sachweh, Sabine and Zündorf, Albert},
booktitle={2020 46th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)}, title={Deriving Microservice Code from Underspecified Domain Models Using DevOps-Enabled Modeling Languages and Model Transformations},
year={2020},
volume={},
number={},
pages={229-236},
abstract={Domain-driven Design (DDD) is a model-based software design methodology, which focuses on close collaboration of domain experts and software engineers. It promotes to capture relevant domain concepts in domain models in order to define a ubiquitous language, whose terms are well understood by stakeholders and consistently used throughout the software engineering process. DDD is considered particularly useful in Microservice Architecture (MSA) engineering, because it specifies patterns to structure modeled domain concepts in isolated contexts. These contexts determine concepts' applicability and validity, and make relationships between domain concepts beyond context boundaries explicit. Consequently, DDD contexts may be used to prescribe microservices' granularities and interaction relationships. However, domain models are usually underspecified, which facilitates communication with domain experts, but hampers the derivation of microservice code.In this paper, we present a model-driven methodology towards deriving microservice code from underspecified domain models. It relies on a set of viewpoint-based MSA modeling languages, which respect the concerns of DevOps teams, and a set of automatic model transformations, which decrease modeling effort and systematize source code derivation. We validate the applicability of our methodology by means of two case studies.},
keywords={Unified modeling language;Context modeling;Data models;Biological system modeling;Computational modeling;Stakeholders;Software;Services Architectures;Services Engineering;Modeling of computer architecture},
doi={10.1109/SEAA51224.2020.00047},
ISSN={},
month={Aug},}

@INPROCEEDINGS{8906894,
author={Jumagaliyev, Assylbek and Elkhatib, Yehia},
booktitle={2019 ACM/IEEE 22nd International Conference on Model Driven Engineering Languages and Systems (MODELS)}, title={A Modelling Language to Support the Evolution of Multi-tenant Cloud Data Architectures},
year={2019},
volume={},
number={},
pages={139-149},
abstract={Multi-tenant data architectures enable efficient resource utilization in cloud applications, but are currently being implemented in industry and research using manual coding techniques that tend to be time consuming and error prone. We propose a novel domain-specific modeling language, CadaML, to automatically manage the development and evolution of cloud data architectures that (a) adopt multi-tenancy and/or (b) comprise of a combination of different storage solutions such as relational and non-relational databases, and blob storage. CadaML provides concepts and notations to support abstract modelling of a multi-tenant data architecture, and also provides tools to validate the data architecture and automatically produce application code. We rigorously evaluate CadaML through a user experiment where developers of various capabilities are asked to re-architect the data layer of an industrial business process analysis application. We observe that CadaML users required 3.5x less development time than manual coders. In addition to improved productivity, CadaML users highlighted other benefits gained in terms of reliability of generated code and usability.},
keywords={Domain-Specific modeling;Model-Driven Engineering;Cloud Computing;Multi-tenancy;Software Evolution;Code Generation},
doi={10.1109/MODELS.2019.000-7},
ISSN={},
month={Sep.},}

@INPROCEEDINGS{8814517,
author={Jumagaliyev, Assylbek and Elkhatib, Yehia},
booktitle={2019 IEEE 12th International Conference on Cloud Computing (CLOUD)}, title={CadaML: A Modeling Language for Multi-Tenant Cloud Application Data Architectures},
year={2019},
volume={},
number={},
pages={430-434},
abstract={Multi-tenancy is used for efficient resource utilization when cloud resources are shared across multiple customers. In cloud applications, the data layer is often the prime candidate for multi-tenancy, and usually comprises a combination of different cloud storage solutions such as relational and non-relational databases, and blob storage. Each of these storage types is different, requiring its own partitioning schemes to ensure tenant isolation and scalability. Current multi-tenant data architectures are implemented mainly through manual coding techniques that tend to be time consuming and error prone. As an alternative, we propose a domain-specific modeling language, CadaML, that provides concepts and notations to model a multi-tenant data architecture in an abstract way. CadaML also provides tools to validate the data architecture and automatically produce application code to implement said architecture.},
keywords={Domain-Specific modeling;Cloud Computing;Multi-tenancy;Software Evolution;Code Generation},
doi={10.1109/CLOUD.2019.00075},
ISSN={2159-6190},
month={July},}

@INPROCEEDINGS{8703913,
author={Rademacher, Florian and Sachweh, Sabine and Zündorf, Albert},
booktitle={2019 IEEE International Conference on Software Architecture (ICSA)}, title={Aspect-Oriented Modeling of Technology Heterogeneity in Microservice Architecture},
year={2019},
volume={},
number={},
pages={21-30},
abstract={Microservice Architecture (MSA) is a novel approach for the development and deployment of service-based software systems. MSA puts a strong emphasis on loose coupling and high cohesion of services. This increases service-specific independence, which is considered to result in a better scalability, adaptability, and quality of software architectures. Another perceived benefit of adopting MSA is technology heterogeneity. Microservice teams are free to employ the technologies they deem to be most appropriate for service implementation and operation. However, technology heterogeneity increases the number of technologies in a microservice architecture with the risk to introduce technical debt and steeper learning curves for team members. In this paper, we present an approach to streamline the usage of different technologies in MSA-based software systems. It employs Aspect-oriented Modeling to make technology decisions in microservice architectures explicit and enable reasoning about them. Therefore, a set of languages for model-driven microservice development is extended with means to define, modularize, and apply MSA technology aspects. The usage and characteristics of our approach are shown and discussed in the context of a case study from the mobility domain.},
keywords={Computer architecture;Software systems;Resource management;Software architecture;Scalability;Modeling;Cognition;Service-oriented systems engineering;Model-driven development;Software architecture;Software design},
doi={10.1109/ICSA.2019.00011},
ISSN={},
month={March},}

@INPROCEEDINGS{9233043,
author={Yussupov, Vladimir and Breitenbücher, Uwe and Krieger, Christoph and Leymann, Frank and Soldani, Jacopo and Wurster, Michael},
booktitle={2020 IEEE 24th International Enterprise Distributed Object Computing Conference (EDOC)}, title={Pattern-based Modelling, Integration, and Deployment of Microservice Architectures},
year={2020},
volume={},
number={},
pages={40-50},
abstract={Microservice-based architectures (MSAs) gained momentum in industrial and research communities since finer-grained and more independent components foster reuse and reduce time to market. However, to come from the design of MSAs to running applications, substantial knowledge and technology-specific expertise in the deployment and integration of microservices is needed. In this paper, we propose a model-driven and pattern-based approach for composing microservices, which facilitates the transition from architectural models to running deployments. Using a unified modelling for MSAs, including both their integration based on Enterprise Integration Patterns (EIPs) and deployment aspects, our approach enables automatically generating the artefacts for deploying microservice compositions. This helps abstracting away the underlying infrastructure including container orchestration platforms and middleware layer for service integration. To validate the feasibility of our approach, we illustrate its prototypical implementation, with Kubernetes used as container orchestration system and OpenFaaS used for managing integration logic, and we present a case study.},
keywords={Containers;Task analysis;Routing;Standards;Publish-subscribe;Communication channels;Programming;Microservice Architecture;Service Composition;Enterprise Integration Pattern;Model-driven Engineering},
doi={10.1109/EDOC49727.2020.00015},
ISSN={2325-6362},
month={Oct},}

@INPROCEEDINGS{8734441,
author={Cedillo, Priscila and García, Andrés and Diego Cárdenas-D, Juan},
booktitle={2019 Sixth International Conference on eDemocracy eGovernment (ICEDEG)}, title={Towards an Architecture for Electronic Notifications Services on the Cloud: A Model Driven Approach},
year={2019},
volume={},
number={},
pages={76-83},
abstract={Cloud computing technology is being adopted by organizations driven by their need to reduce operational costs, and to deliver scalable and flexible services. Solutions deployed on the cloud are a great point of interest in the commercial and governmental area for e-commerce transactions. Here, electronic invoicing applications play a key role in commercial activities, being a branch of vital importance for the business activities. In order to accomplish certain tasks (e.g., collection of overdue invoices, notifications about payment plans) technological solutions have been proposed. Then, it is important to establish architectures that support developers in creating notification solutions in order to send messages about issues of interest for organizations in a proper manner. Moreover, due to the constant changes of laws, a model driven approach can help as a flexible and maintainable option for these solutions. Therefore, this paper proposes an architecture for the creation of electronic notifications, which allows a good communication between organizations and their clients. In this context, a case study is presented in order to demonstrate the instantiation of the proposed architecture in a real scenario.},
keywords={Cloud computing;Computer architecture;Computational modeling;Companies;Web services;cloud computing;web service;e-invoicing;notification;SMS;mail},
doi={10.1109/ICEDEG.2019.8734441},
ISSN={2573-1998},
month={April},}

@INPROCEEDINGS{9141150,
author={Schmidt, Roger Anderson and Thiry, Marcello},
booktitle={2020 15th Iberian Conference on Information Systems and Technologies (CISTI)}, title={Microservices identification strategies : A review focused on Model-Driven Engineering and Domain Driven Design approaches},
year={2020},
volume={},
number={},
pages={1-6},
abstract={A proper architectural design for a microservices system is crucial for its success. Although there are several design strategies to identify software components in general, microservices demands special consideration. In this context of distributed systems, the component size directly impacts on nonfunctional requirements, such as performance, flexibility, reusability, etc. Design practices of coupling and cohesion have to be fine-tuned to determine the ideal microservices granularity. In order to shed light on this question, this study conducted a Systematic Literature Review that investigates microservices identification proposals. From procedures and guidelines inspired by Kitchenham et al., a rigorous research protocol was defined and performed, that covers publications from 2013 to 2019. Starting with an initial screening of 715 papers, 27 studies were considered relevant to answer four research questions. Besides microservices decomposition strategies, this review underlines Model Driven Engineering and Domain Driven Design, once they represent valuable approaches to support this challenging task. Moreover, this work highlights that only a few studies had explored these approaches in their strategies, which opens promising potential for further research.},
keywords={Data models;Unified modeling language;Protocols;Systematics;Proposals;Databases;microservices;identification;decomposition;granularity;MDE;DDD;model-driven;domain-driven.},
doi={10.23919/CISTI49556.2020.9141150},
ISSN={2166-0727},
month={June},}

@INPROCEEDINGS{8884900,
author={Gias, Alim Ul and Casale, Giuliano and Woodside, Murray},
booktitle={2019 IEEE 39th International Conference on Distributed Computing Systems (ICDCS)}, title={ATOM: Model-Driven Autoscaling for Microservices},
year={2019},
volume={},
number={},
pages={1994-2004},
abstract={Microservices based architectures are increasingly widespread in the cloud software industry. Still, there is a shortage of auto-scaling methods designed to leverage the unique features of these architectures, such as the ability to independently scale a subset of microservices, as well as the ease of monitoring their state and reciprocal calls. We propose to address this shortage with ATOM, a model-driven autoscaling controller for microservices. ATOM instantiates and solves at run-time a layered queueing network model of the application. Computational optimization is used to dynamically control the number of replicas for each microservice and its associated container CPU share, overall achieving a fine-grained control of the application capacity at run-time. Experimental results indicate that for heavy workloads ATOM offers around 30%-37% higher throughput than baseline model-agnostic controllers based on simple static rules. We also find that model-driven reasoning reduces the number of actions needed to scale the system as it reduces the number of bottleneck shifts that we observe with model-agnostic controllers.},
keywords={Throughput;Task analysis;Estimation;Atomic layer deposition;Containers;Computational modeling;Computer architecture;microservices;autoscaling;layered queueing network;performance optimization},
doi={10.1109/ICDCS.2019.00197},
ISSN={2575-8411},
month={July},}

@INPROCEEDINGS{9529482,
author={Sun, Chang-ai and Wang, Jing and Liu, Zhenxian and Han, Yanbo},
booktitle={2021 IEEE 45th Annual Computers, Software, and Applications Conference (COMPSAC)}, title={A Variability-Enabling and Model-Driven Approach to Adaptive Microservice-based Systems},
year={2021},
volume={},
number={},
pages={968-973},
abstract={A microservice-based system is composed of numerous independently deployed and executed microservices, among which normally exist the complex dependencies. Traditional service composition approaches usually expect the business process predefined at design time. As a result, it is difficult for the microservice-based system to quickly adapt to the frequently changing operation environments and business requirements. To address the above limitations, we propose a variability-enabling and model-driven approach to developing adaptive microservice-based systems. Our approach first models the business process with variability using VxBPMN4MS, an extension of Business Process Model and Notation (BPMN) with support for variability, then transforms the business process model to variability supported microservice composition frameworks, and finally derives business process instances at run-time according to the predefined process configuration. We have developed a platform to automate the proposed approach as much as possible, and conducted a case study to evaluate the effectiveness of the proposed approach and platform.},
keywords={Adaptation models;Adaptive systems;Computational modeling;Conferences;Transforms;Computer architecture;Software;Microservices;Adaptive Microservice Compositions;Business Process Model and Notation;Variability Modelling;Model-Driven Architecture},
doi={10.1109/COMPSAC51774.2021.00130},
ISSN={0730-3157},
month={July},}

@INPROCEEDINGS{9592516,
author={Bibartiu, Otto and Dürr, Frank and Rothermel, Kurt},
booktitle={2021 IEEE International Conference on Services Computing (SCC)}, title={Clams: A Cloud Application Modeling Solution},
year={2021},
volume={},
number={},
pages={1-10},
abstract={A wide range of new modeling languages with a specific focus on cloud computing, also known as cloud modeling languages (CMLs), have been introduced to help developers describe, evaluate, and deploy cloud applications. In general, CMLs define applications as interconnected cloud components within an architectural topology. However, in agile software development, developers describe system-level functionalities using user stories or epics to define end-user scenarios. So far, a CML bridging the gap between formal architectural descriptions and the informal scenario descriptions from agile development is missing. We present Clams (Cloud application modeling solution), a scenario-based CML. Clams uses cloud computing patterns as architectural placeholders in combination with message sequence charts. We introduce standard tooling to handle Clams models and show how one can refine patterns to concrete service offerings. Additionally, we also provide a development framework to support the creation of custom tools to evaluate, analyze, or translate Clams models efficiently.},
keywords={Cloud computing;Computational modeling;Architecture;Agile software development;Service computing;Computer architecture;Tools;Cloud Modeling Language;Scenarios;Cloud Computing Patterns},
doi={10.1109/SCC53864.2021.00013},
ISSN={2474-2473},
month={Sep.},}

@INPROCEEDINGS{8776962,
author={Tegeler, Tim and Gossen, Frederik and Steffen, Bernhard},
booktitle={2019 9th International Conference on Cloud Computing, Data Science Engineering (Confluence)}, title={A Model-driven Approach to Continuous Practices for Modern Cloud-based Web Applications},
year={2019},
volume={},
number={},
pages={1-6},
abstract={In this paper, we propose a model-driven approach to Continuous Software Integration and Deployment (CI/CD) for modern cloud-based applications. Key to our approach is a formal graphical modelling language for the specification of the processes and tasks involved. Based on these specifications the complete CI/CD configurations are generated fully and automatically guaranteeing their correctness with regard to the specification by construction. This way typical sources of critical errors can be avoided lowering the hurdle to introduce CI/CD especially in mature projects. We demonstrate the power of our model-driven approach with the help of an industrial web application - a prime example for cloud-based applications.},
keywords={Pipelines;Syntactics;Servers;Cloud computing;Software;Task analysis;Tools;Continuous Integration;Continuous Deployment;Model-driven;Cloud-based Applications},
doi={10.1109/CONFLUENCE.2019.8776962},
ISSN={},
month={Jan},}

@INPROCEEDINGS{8814534,
author={Brabra, Hayet and Mtibaa, Achraf and Gaaloul, Walid and Benatallah, Boualem and Gargouri, Faiez},
booktitle={2019 IEEE 12th International Conference on Cloud Computing (CLOUD)}, title={Model-Driven Orchestration for Cloud Resources},
year={2019},
volume={},
number={},
pages={422-429},
abstract={Several DevOps tools have emerged to orchestrate cloud resources. However, inherent heterogeneity and complex implementation within these tools make it hard for DevOps users to design required resource-related artifacts. Currently, the defacto standard for cloud resource modeling and orchestration is TOSCA. Nonetheless, TOSCA is usually bound to TOSCA-compliant orchestration tools. Moreover, the actual integration between TOSCA and DevOps tools is still performed using costly coding and in ad-hoc manner. To resolve this, we believe that mapping and translation mechanisms between TOSCA and DevOps tools should be provided. In this paper, we propose a new model-driven approach for cloud resource orchestration. Our approach (i) adopts TOSCA to design resource-related artifacts regardless of a specific DevOps tool; (ii) enables a new model-driven translation technique that serves to translate the designed artifacts using TOSCA into DevOps specific artifacts and (iii) provides Connectors that intend to establish the bridge between DevOps-specific artifacts and the DevOps tools. Our approach provides a powerful enhancement to DevOps productivity and reusability by assisting toward a seamless integration between TOSCA and DevOps tools.},
keywords={Artifact, TOSCA, Orchestration, Transformation, MDE},
doi={10.1109/CLOUD.2019.00074},
ISSN={2159-6190},
month={July},}


@incollection{fazio_model-driven_2020,
	address = {Cham},
	title = {Model-{Driven} {Simulation} for {Performance} {Engineering} of {Kubernetes}-{Style} {Cloud} {Cluster} {Architectures}},
	volume = {1115},
	isbn = {978-3-030-63160-4 978-3-030-63161-1},
	url = {http://link.springer.com/10.1007/978-3-030-63161-1_1},
	language = {en},
	urldate = {2022-02-03},
	booktitle = {Advances in {Service}-{Oriented} and {Cloud} {Computing}},
	publisher = {Springer International Publishing},
	author = {Ghirardini, Federico and Samir, Areeg and Fronza, Ilenia and Pahl, Claus},
	editor = {Fazio, Maria and Zimmermann, Wolf},
	year = {2020},
	doi = {10.1007/978-3-030-63161-1_1},
	note = {Series Title: Communications in Computer and Information Science},
	pages = {7--20},
}

@article{mouratidis_security_2020,
	title = {A security requirements modelling language for cloud computing environments},
	volume = {19},
	issn = {1619-1366, 1619-1374},
	url = {http://link.springer.com/10.1007/s10270-019-00747-8},
	doi = {10.1007/s10270-019-00747-8},
	language = {en},
	number = {2},
	urldate = {2022-02-03},
	journal = {Software and Systems Modeling},
	author = {Mouratidis, Haralambos and Shei, Shaun and Delaney, Aidan},
	month = mar,
	year = {2020},
	pages = {271--295},
}

@incollection{la_rosa_data_2021,
	address = {Cham},
	title = {Data and {Cloud} {Polymorphic} {Application} {Modelling} in {Multi}-clouds and {Fog} {Environments}},
	volume = {12751},
	isbn = {978-3-030-79381-4 978-3-030-79382-1},
	url = {https://link.springer.com/10.1007/978-3-030-79382-1_27},
	language = {en},
	urldate = {2022-02-03},
	booktitle = {Advanced {Information} {Systems} {Engineering}},
	publisher = {Springer International Publishing},
	author = {Verginadis, Yiannis and Kritikos, Kyriakos and Patiniotakis, Ioannis},
	editor = {La Rosa, Marcello and Sadiq, Shazia and Teniente, Ernest},
	year = {2021},
	doi = {10.1007/978-3-030-79382-1_27},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {449--464},
}


@incollection{gregory_towards_2021,
	address = {Cham},
	title = {Towards {Integrating} {Blockchains} with {Microservice} {Architecture} {Using} {Model}-{Driven} {Engineering}},
	volume = {426},
	isbn = {978-3-030-88582-3 978-3-030-88583-0},
	url = {https://link.springer.com/10.1007/978-3-030-88583-0_16},
	abstract = {Abstract
            Blockchain presents a feasible method to persist immutable information in a distributed ledger to improve the level of authentication and trust. Moreover, smart contracts enable the automated execution of any contract concluded between participants of the Blockchain network. On the other hand, Microservice Architecture (MSA) is a novel approach towards service-based scalable applications. In our paper, we present an approach based on Model-Driven Engineering (MDE) that aims to facilitate the integration process of Blockchains into MSA-based applications in order to benefit from the advantages attributed to Blockchains.},
	language = {en},
	urldate = {2022-02-03},
	booktitle = {Agile {Processes} in {Software} {Engineering} and {Extreme} {Programming} – {Workshops}},
	publisher = {Springer International Publishing},
	author = {Trebbau, Simon and Wizenty, Philip and Sachweh, Sabine},
	editor = {Gregory, Peggy and Kruchten, Philippe},
	year = {2021},
	doi = {10.1007/978-3-030-88583-0_16},
	note = {Series Title: Lecture Notes in Business Information Processing},
	pages = {167--175},
}

@incollection{damiani_jolie_2021,
	address = {Cham},
	title = {Jolie and {LEMMA}: {Model}-{Driven} {Engineering} and {Programming} {Languages} {Meet} on {Microservices}},
	volume = {12717},
	isbn = {978-3-030-78141-5 978-3-030-78142-2},
	shorttitle = {Jolie and {LEMMA}},
	url = {https://link.springer.com/10.1007/978-3-030-78142-2_17},
	language = {en},
	urldate = {2022-02-03},
	booktitle = {Coordination {Models} and {Languages}},
	publisher = {Springer International Publishing},
	author = {Giallorenzo, Saverio and Montesi, Fabrizio and Peressotti, Marco and Rademacher, Florian and Sachweh, Sabine},
	editor = {Damiani, Ferruccio and Dardha, Ornela},
	year = {2021},
	doi = {10.1007/978-3-030-78142-2_17},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {276--284},
}

@incollection{bucchiarone_graphical_2020,
	address = {Cham},
	title = {Graphical and {Textual} {Model}-{Driven} {Microservice} {Development}},
	isbn = {978-3-030-31645-7 978-3-030-31646-4},
	url = {http://link.springer.com/10.1007/978-3-030-31646-4_7},
	language = {en},
	urldate = {2022-02-03},
	booktitle = {Microservices},
	publisher = {Springer International Publishing},
	author = {Rademacher, Florian and Sorgalla, Jonas and Wizenty, Philip and Sachweh, Sabine and Zündorf, Albert},
	editor = {Bucchiarone, Antonio and Dragoni, Nicola and Dustdar, Schahram and Lago, Patricia and Mazzara, Manuel and Rivera, Victor and Sadovykh, Andrey},
	year = {2020},
	doi = {10.1007/978-3-030-31646-4_7},
	pages = {147--179},
}

@incollection{bruel_model-driven_2020,
	address = {Cham},
	title = {A {Model}-{Driven} {Approach} {Towards} {Automatic} {Migration} to {Microservices}},
	volume = {12055},
	isbn = {978-3-030-39305-2 978-3-030-39306-9},
	url = {http://link.springer.com/10.1007/978-3-030-39306-9_2},
	language = {en},
	urldate = {2022-02-03},
	booktitle = {Software {Engineering} {Aspects} of {Continuous} {Development} and {New} {Paradigms} of {Software} {Production} and {Deployment}},
	publisher = {Springer International Publishing},
	author = {Bucchiarone, Antonio and Soysal, Kemal and Guidi, Claudio},
	editor = {Bruel, Jean-Michel and Mazzara, Manuel and Meyer, Bertrand},
	year = {2020},
	doi = {10.1007/978-3-030-39306-9_2},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {15--36},
}

@Comment{jabref-meta: databaseType:bibtex;}
